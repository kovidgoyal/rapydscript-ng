# vim:fileencoding=utf-8
# License: BSD Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from ast import (
    AST_Definitions, AST_Scope, AST_Method, AST_Except, AST_EmptyStatement,
    AST_Statement, AST_Seq, AST_BaseCall, AST_Dot, AST_Sub, AST_ItemAccess,
    AST_Conditional, AST_Binary, AST_UnaryPostfix, AST_BlockStatement
)

def force_statement(stat, output):
    if output.option("bracketize"):
        if not stat or isinstance(stat, AST_EmptyStatement):
            output.print("{}")
        elif isinstance(stat, AST_BlockStatement):
            stat.print(output)
        else:
            output.with_block(def():
                output.indent()
                stat.print(output)
                output.newline()
            )
    else:
        if not stat or isinstance(stat, AST_EmptyStatement):
            output.force_semicolon()
        else:
            stat.print(output)

# return true if the node at the top of the stack (that means the
# innermost node in the current output) is lexically the first in
# a statement.
def first_in_statement(output):
    a = output.stack()
    i = a.length
    node = a[i -= 1]
    p = a[i -= 1]
    while i > 0:
        if isinstance(p, AST_Statement) and p.body is node:
            return True
        if isinstance(p, AST_Seq) and p.car is node
        or isinstance(p, AST_BaseCall) and p.expression is node
        or isinstance(p, AST_Dot) and p.expression is node
        or isinstance(p, AST_Sub) and p.expression is node
        or isinstance(p, AST_ItemAccess) and p.expression is node
        or isinstance(p, AST_Conditional) and p.condition is node
        or isinstance(p, AST_Binary) and p.left is node
        or isinstance(p, AST_UnaryPostfix) and p.expression is node:
            node = p
            p = a[i -= 1]
        else:
            return False


def bind_methods(methods, output):
    # bind the methods
    if methods:
        for arg in methods:
            output.indent()
            output.print("this.")
            output.assign(arg)
            output.print("_$rapyd$_bind")
            output.with_parens(def():
                output.print("this.")
                output.print(arg)
                output.comma()
                output.print("this")
            )
            output.semicolon()
            output.newline()

def declare_vars(vars, output):
    # declare all variables as local, unless explictly set otherwise
    if vars.length:
        output.indent()
        output.print("var")
        output.space()
        vars.forEach(def(arg, i):
            if i:
                output.comma()

            arg.print(output)
        )
        output.semicolon()
        output.newline()

def display_body(body, is_toplevel, output):
    last = body.length - 1
    body.forEach(def(stmt, i):
        if not (isinstance(stmt, AST_EmptyStatement)) and not (isinstance(stmt, AST_Definitions)):
            output.indent()
            stmt.print(output)
            if not (i is last and is_toplevel):
                output.newline()
    )


def display_complex_body(node, is_toplevel, output, function_preamble):
    offset = 0
    # argument offset
    # this is a method, add 'var self = this'
    if isinstance(node, AST_Method) and not node.static:
        output.indent()
        output.print("var")
        output.space()
        output.assign(node.argnames[0])
        output.print("this")
        output.semicolon()
        output.newline()
        offset += 1

    if isinstance(node, AST_Scope):
        function_preamble(node, output, offset)
        # rebind parent's methods and bind own methods
        if output.option("auto_bind") and isinstance(node, AST_Method) and node.name and node.name.name is "__init__":
            output.indent()
            output.print("_$rapyd$_rebind_all")
            output.with_parens(def():
                output.print("this")
                output.comma()
                output.print("true")
            )
            output.semicolon()
            output.newline()
            bind_methods(node.bound, output)

        declare_vars(node.localvars, output)

    elif isinstance(node, AST_Except):
        if node.argname:
            output.indent()
            output.print("var")
            output.space()
            output.assign(node.argname)
            output.print("_$rapyd$_Exception")
            output.semicolon()
            output.newline()

    display_body(node.body, is_toplevel, output)

def print_bracketed(node, output, complex, function_preamble):
    if node.body.length > 0:
        output.with_block(def():
            if complex:
                display_complex_body(node, False, output, function_preamble)
            else:
                display_body(node.body, False, output, function_preamble)
        )
    else:
        output.print("{}")

def print_with(self, output):
    exits = v'[]'
    output.assign('_$rapyd$_with_exception'), output.print('undefined'), output.end_statement()
    for clause in self.clauses:
        output.with_counter += 1
        clause_name = '_$rapyd$_with_clause_' + output.with_counter
        exits.push(clause_name)
        output.indent(), output.print('var '), output.assign(clause_name)
        clause.expression.print(output)
        output.end_statement()
        output.indent()
        if clause.alias:
            output.assign(clause.alias.name)
        output.print(clause_name + '.__enter__()')
        output.end_statement()
    output.indent(), output.print('try'), output.space()
    output.with_block(def():
        output.indent()
        self._do_print_body(output)
        output.newline()
    )
    output.space(), output.print('catch(e)')
    output.with_block(def():
        output.indent(), output.assign('_$rapyd$_with_exception'), output.print('e'), output.end_statement()
    )
    output.newline(), output.indent(), output.spaced('if', '(_$rapyd$_with_exception', '===', 'undefined)')
    output.with_block(def():
        for clause in exits:
            output.indent(), output.print(clause + '.__exit__()'), output.end_statement()
    )
    output.space(), output.print('else'), output.space()
    output.with_block(def():
        output.indent(), output.assign('_$rapyd$_with_suppress'), output.print('false'), output.end_statement()
        for clause in exits:
            output.indent()
            output.spaced('_$rapyd$_with_suppress', '|=', '_$rapyd$_bool(' + clause + '.__exit__(_$rapyd$_with_exception.constructor,',
                            '_$rapyd$_with_exception,', '_$rapyd$_with_exception.stack))')
            output.end_statement()
        output.indent(), output.spaced('if', '(!_$rapyd$_with_suppress)', 'throw _$rapyd$_with_exception'), output.end_statement()
    )


