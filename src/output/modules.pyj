# vim:fileencoding=utf-8
# License: BSD Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
# globals: writefile

from parse import COMPILER_VERSION
from output.statements import declare_vars, display_body
from output.stream import OutputStream

def write_imports(module, output):
    imports = []
    for import_id in Object.keys(module.imports):
        imports.push(module.imports[import_id])
    imports.sort(def(a, b):
        a, b = a.import_order, b.import_order
        return ((a < b) ? -1 : ((a > b) ? 1 : 0))
    )
    if imports.length > 1:
        output.indent()
        output.print('var _$rapyd$_modules = {};')
        output.newline()

    # Declare all variable names exported from the modules as global symbols
    nonlocalvars = {}
    for module_ in imports:
        for name in module_.nonlocalvars:
            nonlocalvars[name] = True
    nonlocalvars = Object.getOwnPropertyNames(nonlocalvars).join(', ')
    if nonlocalvars.length:
        output.indent()
        output.print('var ' + nonlocalvars)
        output.semicolon()
        output.newline()

    # Create the module objects
    for module_ in imports:
        module_id = module_.module_id
        if module_id is not '__main__':
            output.indent()
            if module_id.indexOf('.') is -1:
                output.print('_$rapyd$_modules.' + module_id)
            else:
                output.print('_$rapyd$_modules["' + module_id + '"]')
            output.space(), output.print('='), output.space(), output.print('{}')
            output.end_statement()

    # Output module code
    for module_ in imports:
        if module_.module_id is not '__main__':
            print_module(module_, output)

def write_main_name(output):
    if output.option('write_name'):
        output.newline()
        output.indent()
        output.print('var __name__ = "__main__"')
        output.semicolon()
        output.newline()
        output.newline()

def declare_exports(module_id, exports, submodules, output):
    seen = {}
    output.newline()
    for symbol in exports:
        if not Object.prototype.hasOwnProperty.call(seen, symbol.name):
            output.indent()
            if module_id.indexOf('.') is -1:
                output.print('_$rapyd$_modules.' + module_id + '.' + symbol.name)
            else:
                output.print('_$rapyd$_modules["' + module_id + '"].' + symbol.name)
            output.space(), output.print('='), output.space(), output.print(symbol.name)
            seen[symbol.name] = True
            output.end_statement()

def declare_submodules(module_id, submodules, output):
    seen = {}
    for sub_module_id in submodules:
        if not Object.prototype.hasOwnProperty.call(seen, sub_module_id):
            seen[sub_module_id] = True
            key = sub_module_id.split('.')[-1]
            output.indent()
            output.spaced('_$rapyd$_modules["' + module_id + '"]["' + key + '"]', '=', '_$rapyd$_modules["' + sub_module_id + '"]')
            output.end_statement()

def print_top_level(self, output):
    is_main = output.is_main()

    if output.option("private_scope") and is_main:
        output.with_parens(def():
            output.print("function()")
            output.with_block(def():
                # strict mode is more verbose about errors, and less forgiving about them
                # kind of like Python
                output.indent()
                output.print('"use strict"')
                output.end_statement()

                output.prologue(self)
                write_imports(self, output)
                output.newline()
                output.indent()
                output.with_parens(def():
                    output.print("function()")
                    output.with_block(def():
                        write_main_name(output)
                        output.newline()
                        declare_vars(self.localvars, output)
                        display_body(self.body, True, output)
                        output.newline()
                    )
                )
                output.print("();")
                output.newline()
            )
        )
        output.print("();")
        output.print("")
    else:
        if is_main:
            output.prologue(self)
            write_imports(self, output)
            write_main_name(output)

        declare_vars(self.localvars, output)
        display_body(self.body, True, output)

def print_module(self, output):

    def output_module(output):
        declare_vars(self.localvars, output)
        display_body(self.body, True, output)
        declare_exports(self.module_id, self.exports, self.submodules, output)

    output.newline()
    output.indent()
    output.with_parens(def():
        output.print("function()")
        output.with_block(def():
            # dump the logic of this module
            if output.option('write_name'):
                output.indent()
                output.print('var ')
                output.assign('__name__')
                output.print('"' + self.module_id + '"')
                output.semicolon()
                output.newline()
            def output_key(beautify, auto_bind, js_version):
                return 'beautify:' + beautify + ' auto_bind:' + auto_bind + ' js_version:' + js_version
            okey = output_key(output.option('beautify'), output.option('auto_bind'), output.option('js_version'))
            if self.is_cached and okey in self.outputs:
                output.print(self.outputs[okey])
                declare_submodules(self.module_id, self.submodules, output)
            else:
                output_module(output)
                declare_submodules(self.module_id, self.submodules, output)
                if self.srchash and self.filename:
                    cached = {
                        'version':COMPILER_VERSION, 'signature':self.srchash, 'classes': {}, 'baselib':self.baselib,
                        'nonlocalvars':self.nonlocalvars, 'imported_module_ids':self.imported_module_ids, 'exports':[],
                        'outputs':{},
                    }
                    for cname in Object.keys(self.classes):
                        cobj = self.classes[cname]
                        cached.classes[cname] = {'name':{'name':cobj.name.name}, 'static':cobj.static, 'bound':cobj.bound}
                    for symdef in self.exports:
                        cached.exports.push({'name':symdef.name})
                    for beautify in [True, False]:
                        for auto_bind in [True, False]:
                            for js_version in [5, 6]:
                                co = OutputStream({'beautify':beautify, 'auto_bind':auto_bind, 'js_version':js_version, 'private_scope':False, 'write_name':False})
                                co.with_indent(output.indentation(), def():
                                    output_module(co)
                                )
                                raw = co.toString()
                                cached.outputs[output_key(beautify, auto_bind, js_version)] = raw
                    try:
                        writefile(self.filename + '-cached', JSON.stringify(cached, None, '\t'))
                    except Error as e:
                        console.error('Failed to write output cache file:', self.filename + '-cached', 'with error:', e)
        )
    )
    output.print("()")
    output.semicolon()
    output.newline()

def print_imports(container, output):
    def add_aname(aname, key, from_import):
        output.print('var ')
        output.assign(aname)
        if key.indexOf('.') is -1:
            output.print('_$rapyd$_modules.'), output.print(key)
        else:
            output.print('_$rapyd$_modules["'), output.print(key), output.print('"]')
        if from_import:
            output.print('.')
            output.print(from_import)
        output.semicolon()
        output.newline()
        output.indent()

    for self in container.imports:
        output.import_(self.module)
        if self.argnames:
            # A from import
            for argname in self.argnames:
                akey = (argname.alias) ? argname.alias.name : argname.name
                add_aname(akey, self.key, argname.name)
        else:
            if self.alias:
                add_aname(self.alias.name, self.key, False)
            else:
                bound_name = self.key.split('.', 1)[0]
                add_aname(bound_name, bound_name, False)


