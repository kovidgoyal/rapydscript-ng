# vim:fileencoding=utf-8
# License: BSD Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
# globals:regenerate

from ast import AST_ClassCall, AST_New
from output.stream import OutputStream
from output.statements import print_bracketed

def decorate(decorators, output, func):
    pos = 0
    def wrap():
        nonlocal pos
        if pos < decorators.length:
            decorators[pos].expression.print(output)
            pos += 1
            output.with_parens(def():
                wrap()
            )
        else:
            func()
    wrap()

def function_args(argnames, output, strip_first):
    output.with_parens(def():
        if argnames and argnames.length and (argnames.is_simple_func is True or argnames.is_simple_func is undefined):
            ((strip_first) ? argnames.slice(1) : argnames).forEach(def(arg, i):
                if i:
                    output.comma()
                arg.print(output)
            )
    )
    output.space()

def function_preamble(node, output, offset):
    # if function takes any arguments
    if node.argnames:
        # If this function has optional parameters/*args/**kwargs declare it differently
        if node.argnames.is_simple_func is not True:
            a = node.argnames
            kw = 'arguments[arguments.length-1]'
            # Define all formal parameters
            for c, arg in enumerate(a):
                i = c - offset
                if i >= 0:
                    output.indent()
                    output.print("var")
                    output.space()
                    output.assign(arg)
                    if Object.prototype.hasOwnProperty.call(a.defaults, arg.name):
                        output.spaced('(arguments[' + i + ']', '===', 'undefined', '||',
                                        '(', i, '===', 'arguments.length-1', '&&', kw, '!==', 'null', '&&', 'typeof', kw, '===', '"object"', '&&',
                                        kw, '[_$rapyd$_kwargs_symbol]', '===', 'true))', '?', '')
                        output.with_parens(def():
                            a.defaults[arg.name].print(output)
                        )
                        output.space()
                        output.print(':')
                        output.space()
                    else:
                        output.spaced('(', i, '===', 'arguments.length-1', '&&', kw, '!==', 'null', '&&', 'typeof', kw, '===', '"object"', '&&',
                                        kw, '[_$rapyd$_kwargs_symbol]', '===', 'true)', '?', 'undefined', ':', '')
                    output.print('arguments[' + i + ']')
                    output.end_statement()
            if a.kwargs or a.has_defaults:
                # Look for an options object
                kw = (a.kwargs) ? a.kwargs.name : '_$rapyd$_kwargs_obj'
                output.indent()
                output.spaced('var', kw, '=', 'arguments[arguments.length-1]')
                output.end_statement()
                # Ensure kwargs is the options object
                output.indent()
                output.spaced('if', '(' + kw, '===', 'null', '||', 'typeof', kw, '!==', '"object"', '||', kw, '[_$rapyd$_kwargs_symbol]', '!==', 'true)', kw, '=', '{}')
                output.end_statement()
                # Read values from the kwargs object for any formal parameters
                if a.has_defaults:
                    for dname in Object.keys(a.defaults):
                        output.indent()
                        output.spaced('if', '(Object.prototype.hasOwnProperty.call(' + kw + ',', '"' + dname + '"))')
                        output.with_block(def():
                            output.indent()
                            output.spaced(dname, '=', kw + '.' + dname)
                            output.end_statement()
                            if a.kwargs:
                                output.indent()
                                output.spaced('delete', kw + '.' + dname)
                                output.end_statement()
                        )
                        output.newline()

            if a.starargs is not undefined:
                # Define the *args parameter, putting in whatever is left after assigning the formal parameters and the options object
                nargs = a.length - offset
                output.indent()
                output.spaced('var', a.starargs.name, '=', 'Array.prototype.slice.call(arguments,', nargs + ')')
                output.end_statement()
                # Remove the options object, if present
                output.indent()
                output.spaced('if', '(' + kw, '!==', 'null', '&&', 'typeof', kw, '===', '"object"', '&&', kw, '[_$rapyd$_kwargs_symbol]', '===', 'true)', a.starargs.name)
                output.print('.pop()')
                output.end_statement()


def function_definition(self, output, nokeyword, strip_first):
    if not nokeyword:
        output.print("function")

    if self.name:
        output.space()
        self.name.print(output)
    if self.is_generator:
        output.print('()'), output.space()
        output.with_block(def():
            if output.options.js_version >= 6:
                output.indent()
                output.print('function* js_generator')
                function_args(self.argnames, output, strip_first)
                print_bracketed(self, output, True, function_preamble)
            else:
                temp = OutputStream({'beautify':True})
                temp.print('function* js_generator')
                function_args(self.argnames, temp, strip_first)
                print_bracketed(self, temp, True, function_preamble)
                transpiled = regenerate(temp.get(), output.options.beautify).replace(/regeneratorRuntime.(wrap|mark)/g, '_$rapyd$_regenerator.regeneratorRuntime.$1')
                if output.options.beautify:
                    ci = output.make_indent(0)
                    transpiled = [ci + x for x in transpiled.split('\n')].join('\n')
                output.print(transpiled)
            output.newline()
            output.indent()
            output.spaced('var', 'result', '=', 'js_generator.apply(this,', 'arguments)')
            output.end_statement()
            # Python's generator objects use a separate method to send data to the generator
            output.indent()
            output.spaced('result.send', '=', 'result.next')
            output.end_statement()
            output.indent()
            output.spaced('return', 'result')
            output.end_statement()
        )
    else:
        function_args(self.argnames, output, strip_first)
        print_bracketed(self, output, True, function_preamble)

def no_constructor_parens(self, output):
    # self should be AST_New.  decide if we want to show parens or not.
    return self.args.length is 0 and not output.option("beautify")

def print_function(output, nokeyword):
    self = this
    if self.decorators and self.decorators.length:
        output.print("var")
        output.space()
        output.assign(self.name.name)
        decorate(self.decorators, output, def():function_definition(self, output, nokeyword, False);)
        output.semicolon()
    else:
        function_definition(self, output, nokeyword, False)

def print_function_call(self, output):

    if isinstance(self, AST_ClassCall):
        # class methods are called through the prototype unless static
        if self.static:
            self.class.print(output)
            output.print(".")
            output.print(self.method)
        else:
            self.class.print(output)
            output.print(".prototype.")
            output.print(self.method)
            output.print(".call")
    else:
        # regular function call
        self.expression.print(output)

    if isinstance(self, AST_New) and no_constructor_parens(self, output):
        return

    has_kwarg_items = self.args.kwarg_items and self.args.kwarg_items.length
    has_kwarg_formals = self.args.kwargs and self.args.kwargs.length
    has_kwargs = has_kwarg_items or has_kwarg_formals

    output_kwargs = def():
        output.print('_$rapyd$_desugar_kwargs(')
        if has_kwarg_items:
            self.args.kwarg_items.forEach(def(kwname, i):
                if i > 0:
                    output.print(',')
                    output.space()
                kwname.print(output)
            )
            if has_kwarg_formals:
                output.print(',')
                output.space()

        if has_kwarg_formals:
            output.print('{')
            self.args.kwargs.forEach(def(pair, i):
                if i: output.comma()
                pair[0].print(output)
                output.print(':')
                output.space()
                pair[1].print(output)
            )
            output.print('}')
        output.print(')')

    if self.args.starargs:
        if isinstance(self, AST_New):
            obj = '_$rapyd$_new_temp'
        else:
            obj = (self.expression.expression ? self.expression.expression : "this")
        output.print(".apply")
        output.with_parens(def():
            if type(obj) is 'string':
                output.print(obj)
            else:
                obj.print(output)
            output.comma()
            # basic arguments
            i = 0
            while i < self.args.length:
                expr = self.args[i]
                is_first = i is 0
                if not is_first:
                    output.print('.concat(')
                if expr.is_array:
                    expr.print(output)
                    i += 1
                else:
                    output.print('[')
                    while i < self.args.length and not self.args[i].is_array:
                        self.args[i].print(output)
                        if i + 1 < self.args.length and not self.args[i+1].is_array:
                            output.print(',')
                            output.space()
                        i += 1
                    output.print(']')
                if not is_first:
                    output.print(')')

            # now kwargs
            if has_kwargs:
                if self.args.length:
                    output.print('.concat(')
                output.print('[')
                output_kwargs()
                output.print(']')
                if self.args.length:
                    output.print(')')
        )
    else:
        output.with_parens(def():
            # normal args
            self.args.forEach(def(expr, i):
                if i:
                    output.comma()
                expr.print(output)
            )

            # kwargs as hash
            if has_kwargs:
                if self.args.length:
                    output.print(',')
                    output.space()
                output_kwargs()
        )

