# vim:fileencoding=utf-8
# License: BSD

# globals: exports, console, _$rapyd$_iterator_symbol, _$rapyd$_kwargs_symbol, _$rapyd$_arraylike, _$rapyd$_list_contains

def abs():
    return Math.abs

def max():
    return Math.max

def min():
    return Math.min

def _$rapyd$_flatten(arr):
    ans = []
    for v'var i=0; i<arr.length; i++':
        value = arr[i]  # noqa:undef
        if Array.isArray(value):
            ans = ans.concat(_$rapyd$_flatten(value))
        else:
            ans.push(value)
    return ans

def dir(item):
    # TODO: this isn't really representative of real Python's dir(), nor is it
    # an intuitive replacement for "for ... in" loop, need to update this logic
    # and introduce a different way of achieving "for ... in"
    arr = []
    for v'var i in item': arr.push(i)  # noqa:undef
    return arr

def ord(x):
    ans = x.charCodeAt(0)
    if 0xD800 <= ans <= 0xDBFF:
        second = x.charCodeAt(1)
        if 0xDC00 <= second <= 0xDFFF:
            return (ans - 0xD800) * 0x400 + second - 0xDC00 + 0x10000
        raise TypeError('string is missing the low surrogate char')
    return ans

def chr(code):
    if code <= 0xFFFF:
        return String.fromCharCode(code)
    code -= 0x10000
    return String.fromCharCode(0xD800+(code>>10), 0xDC00+(code&0x3FF))

def callable(x):
    return v'typeof x === "function"'

def bin(x):
    if type(x) is not 'number' or x % 1 is not 0:
        raise TypeError('integer required')
    ans = x.toString(2)
    if ans[0] is '-':
        ans = '-' + '0b' + ans[1:]
    else:
        ans = '0b' + ans
    return ans

def hex(x):
    if type(x) is not 'number' or x % 1 is not 0:
        raise TypeError('integer required')
    ans = x.toString(16)
    if ans[0] is '-':
        ans = '-' + '0x' + ans[1:]
    else:
        ans = '0x' + ans
    return ans

def _$rapyd$_extends(child, parent):
    child.prototype = Object.create(parent.prototype)
    child.prototype.constructor = child

def _$rapyd$_in():
    if type(Map) is 'function' and type(Set) is 'function':
        return def(val, arr):
            if type(arr) is 'string':
                return arr.indexOf(val) is not -1
            if type(arr.__contains__) is 'function':
                return arr.__contains__(val)
            if isinstance(arr, (Map, Set)):
                return arr.has(val)
            if _$rapyd$_arraylike(arr):
                return _$rapyd$_list_contains.call(arr, val)
            return Object.prototype.hasOwnProperty.call(arr, val)
    return def(val, arr):
        if type(arr) is 'string':
            return arr.indexOf(val) is not -1
        if type(arr.__contains__) is 'function':
            return arr.__contains__(val)
        if _$rapyd$_arraylike(arr):
            return _$rapyd$_list_contains.call(arr, val)
        return Object.prototype.hasOwnProperty.call(arr, val)

def _$rapyd$_Iterable(iterable):
    # Once ES6 is mature, change AST_ForIn to use the iterator protocol and get
    # rid of this function entirely
    if _$rapyd$_arraylike(iterable):
        return iterable
    if type(iterable[_$rapyd$_iterator_symbol]) is 'function':
        iterator = (type(Map) is 'function' and isinstance(iterable, Map)) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]()
        ans = []
        result = iterator.next()
        while not result.done:
            ans.push(result.value)
            result = iterator.next()
        return ans
    # so we can use 'for ... in' syntax with objects, as we would with dicts in python
    return Object.keys(iterable)

def enumerate(iterable):
    if _$rapyd$_arraylike(iterable):
        ans = {
            '_i': -1,
            'next':def():
                this._i += 1
                if this._i < iterable.length:
                    return {'done':False, 'value':[this._i, iterable[this._i]]}
                return {'done':True}
        }
        ans[_$rapyd$_iterator_symbol] = def():
            return this
        return ans
    if type(iterable[_$rapyd$_iterator_symbol]) is 'function':
        iterator = (type(Map) is 'function' and isinstance(iterable, Map)) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]()
        ans = {
            '_iterator':iterator,
            '_i': -1,
            'next':def():
                r = this._iterator.next()
                if r.done:
                    return {'done':True}
                this._i += 1
                return {'done':False, 'value':[this._i, r.value]}
        }
        ans[_$rapyd$_iterator_symbol] = def():
            return this
        return ans
    return enumerate(Object.keys(iterable))

def reversed(iterable):
    if _$rapyd$_arraylike(iterable):
        ans = {
            '_i': iterable.length,
            'next':def():
                this._i -= 1
                if this._i > -1:
                    return {'done':False, 'value':iterable[this._i]}
                return {'done':True}
        }
        ans[_$rapyd$_iterator_symbol] = def():
            return this
        return ans
    raise TypeError('reversed() can only be called on arrays or strings')

def iter(iterable):
    # Generate a JavaScript iterator object from iterable
    if type(iterable[_$rapyd$_iterator_symbol]) is 'function':
        return (type(Map) is 'function' and isinstance(iterable, Map)) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]()
    if _$rapyd$_arraylike(iterable):
        ans = {
            '_i': -1,
            'next':def():
                this._i += 1
                if this._i < iterable.length:
                    return {'done':False, 'value':iterable[this._i]}
                return {'done':True}
        }
        ans[_$rapyd$_iterator_symbol] = def():
            return this
        return ans
    return iter(Object.keys(iterable))

def _$rapyd$_len():
    if v'typeof Set' is 'function' and v'typeof Map' is 'function':
        # ES 6 collections are probably present
        return (def(obj):
            if _$rapyd$_arraylike(obj): return obj.length
            if v'obj instanceof Set' or v'obj instanceof Map': return obj.size
            if type(obj.__len__) is 'function': return obj.__len__()
            return Object.keys(obj).length
        )
    return (def(obj):
        if _$rapyd$_arraylike(obj): return obj.length
        if type(obj.__len__) is 'function': return obj.__len__()
        return Object.keys(obj).length
    )

def range(start, stop, step):
    if arguments.length <= 1:
        stop = start or 0
        start = 0
    step = arguments[2] or 1
    length = Math.max(Math.ceil((stop - start) / step), 0)
    return {
        _$rapyd$_iterator_symbol: def(): return this;,
        '_i': start - step,
        '_idx': -1,
        'next': def():
            this._i += step
            this._idx += 1
            if this._idx >= length:
                return {'done':True}
            return {'done':False, 'value':this._i}
        ,
    }

def getattr(obj, name, defval):
    try:
        ret = obj[name]
    except TypeError:
        if defval is undefined:
            raise AttributeError('The attribute ' + name + ' is not present')
        return defval
    if ret is undefined and not v'(name in obj)':
        if defval is undefined:
            raise AttributeError('The attribute ' + name + ' is not present')
        ret = defval
    return ret

def setattr(obj, name, value):
    obj[name] = value

def hasattr(obj, name):
    return v'name in obj'

def _$rapyd$_desugar_kwargs():
    if type(Object.assign) is 'function':
        return def():
            ans = {}
            ans[_$rapyd$_kwargs_symbol] = True
            for v'var i = 0; i < arguments.length; i++':
                Object.assign(ans, arguments[i])
            return ans
    return def():
        ans = {}
        ans[_$rapyd$_kwargs_symbol] = True
        for v'var i = 0; i < arguments.length; i++':
            keys = Object.keys(arguments[i])
            for v'var j = 0; j < keys.length; j++':
                ans[keys[j]] = arguments[i][keys[j]]
        return ans

def _$rapyd$_interpolate_kwargs(f, supplied_args):
    if not f.__argnames__:
        return f.apply(this, supplied_args)
    has_prop = Object.prototype.hasOwnProperty
    kwobj = supplied_args.pop()
    if f.__handles_kwarg_interpolation__:
        args = Array(Math.max(supplied_args.length, f.__argnames__.length) + 1)
        args[-1] = kwobj
        for v'var i = 0; i < args.length - 1; i++':
            if i < f.__argnames__.length:
                prop = f.__argnames__[i]
                if has_prop.call(kwobj, prop):
                    args[i] = kwobj[prop]
                    v'delete kwobj[prop]'
                elif i < supplied_args.length:
                    args[i] = supplied_args[i]
            else:
                args[i] = supplied_args[i]
        return f.apply(this, args)

    for v'var i = 0; i < f.__argnames__.length; i++':
        prop = f.__argnames__[i]
        if has_prop.call(kwobj, prop):
            supplied_args[i] = kwobj[prop]
    return f.apply(this, supplied_args)

def _$rapyd$_interpolate_kwargs_constructor(apply, f, supplied_args):
    if apply:
        f.apply(this, supplied_args)
    else:
        _$rapyd$_interpolate_kwargs.call(this, f, supplied_args)
    return this

if v"typeof exports === 'object'":
    exports['abs()'] = abs
    exports['max()'] = max
    exports['min()'] = min
    exports.dir = dir
    exports.ord = ord
    exports.chr = chr
    exports.bin = bin
    exports.hex = hex
    exports.callable = callable
    exports.enumerate = enumerate
    exports.iter = iter
    exports.extends = _$rapyd$_extends
    exports['_$rapyd$_flatten'] = _$rapyd$_flatten
    exports['_$rapyd$_in()'] = _$rapyd$_in
    exports.iterable = _$rapyd$_Iterable
    exports['len()'] = _$rapyd$_len
    exports.range = range
    exports.reversed = reversed
    exports.getattr = getattr
    exports.setattr = setattr
    exports.hasattr = hasattr
    exports['_$rapyd$_desugar_kwargs()'] = _$rapyd$_desugar_kwargs
    exports['_$rapyd$_interpolate_kwargs'] = _$rapyd$_interpolate_kwargs
    exports['_$rapyd$_interpolate_kwargs_constructor'] = _$rapyd$_interpolate_kwargs_constructor
