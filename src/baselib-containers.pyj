# vim:fileencoding=utf-8
# License: BSD
# Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

# globals:_$rapyd$_iterator_symbol, _$rapyd$_kwargs_symbol, _$rapyd$_arraylike

def _$rapyd$_equals(a, b):
    if a is b:
        return True
    if a and type(a.__eq__) is 'function':
        return a.__eq__(b)
    if b and type(b.__eq__) is 'function':
        return b.__eq__(a)
    if _$rapyd$_arraylike(a) and _$rapyd$_arraylike(b):
        if a.length != b.length:
            return False
        for v'var i=0; i < a.length; i++':
            if not (a[i] == b[i]):
                return False
        return True
    if a and b and a.constructor is b.constructor and a.constructor is Object:
        # Do a dict like comparison
        akeys, bkeys = Object.keys(a), Object.keys(b)
        if akeys.length is not bkeys.length:
            return False
        for v'var j=0; j < akeys.length; j++':
            key = akeys[j]
            if not (a[key] == b[key]):
                return False
        return True
    return False

def _$rapyd$_not_equals(a, b):
    if a is b:
        return False
    if a and type(a.__ne__) is 'function':
        return a.__ne__(b)
    if b and type(b.__ne__) is 'function':
        return b.__ne__(a)
    return not _$rapyd$_equals(a, b)

v'var equals = _$rapyd$_equals'

# list {{{

def _$rapyd$_list_extend(iterable):
    if Array.isArray(iterable) or type(iterable) is 'string':
        # Allocate all new memory in one operation
        start = this.length
        this.length += iterable.length
        for v'var i = 0; i < iterable.length; i++':
            this[start + i] = iterable[i]  # noqa:undef
    else:
        iterator = (type(Map) is 'function' and isinstance(iterable, Map)) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]()
        result = iterator.next()
        while not result.done:
            this.push(result.value)
            result = iterator.next()

def _$rapyd$_list_index(val, start, stop):
    start = start or 0
    if start < 0:
        start = this.length + start
    if start < 0:
        raise ValueError(val + ' is not in list')
    if stop is undefined:
        idx = this.indexOf(val, start)
        if idx is -1:
            raise ValueError(val + ' is not in list')
        return idx
    if stop < 0:
        stop = this.length + stop
    for v'var i = start; i < stop; i++':
        if this[i] == val:
            return i  # noqa:undef
    raise ValueError(val + ' is not in list')

def _$rapyd$_list_pop(index):
    if this.length is 0:
        raise IndexError('list is empty')
    ans = this.splice(index, 1)
    if not ans.length:
        raise IndexError('pop index out of range')
    return ans[0]

def _$rapyd$_list_remove(value):
    idx = this.indexOf(value)
    if idx is -1:
        raise ValueError(value + ' not in list')
    this.splice(idx, 1)

def _$rapyd$_list_to_string():
    return '[' + this.join(', ') + ']'

def _$rapyd$_list_insert(index, val):
    if index < 0:
        index += this.length
    index = min(this.length, max(index, 0))
    if index is 0:
        this.unshift(val)
        return
    for v'var i = this.length; i > index; i--':
        this[i] = this[i - 1]  # noqa:undef
    this[index] = val

def _$rapyd$_list_copy():
    return _$rapyd$_list_constructor(this)

def _$rapyd$_list_clear():
    this.length = 0

def _$rapyd$_list_as_array():
    return Array.prototype.slice.call(this)

def _$rapyd$_list_count(value):
    return this.reduce(def(n, val): return n + (val is value);, 0)

def _$rapyd$_list_sort_key(value):
    t = type(value)
    if t is 'string' or t is 'number':
        return value
    return value.toString()

def _$rapyd$_list_sort_cmp(a, b):
    if a < b:
        return -1
    if a > b:
        return 1
    return 0

def _$rapyd$_list_sort(key, reverse):
    key = key or _$rapyd$_list_sort_key
    mult = -1 if reverse else 1
    keymap = dict()
    for v'var i=0; i < this.length; i++':
        k = this[i]  # noqa:undef
        keymap.set(k, key(k))
    this.sort(def (a, b): return mult * _$rapyd$_list_sort_cmp(keymap.get(a), keymap.get(b));)

def _$rapyd$_list_concat():  # ensure concat() returns an object of type list
    ans = Array.prototype.concat.apply(this, arguments)
    _$rapyd$_list_decorate(ans)
    return ans

def _$rapyd$_list_slice():  # ensure slice() returns an object of type list
    ans = Array.prototype.slice.apply(this, arguments)
    _$rapyd$_list_decorate(ans)
    return ans

def _$rapyd$_list_iterator(value):
    self = this
    return {
        '_i':-1,
        '_list':self,
        'next':def():
            this._i += 1
            if this._i >= this._list.length:
                return {'done':True}
            return {'done':False, 'value':this._list[this._i]}
        ,
    }

def _$rapyd$_list_len():
    return this.length

def _$rapyd$_list_contains(val):
    for v'var i = 0; i < this.length; i++':
        if this[i] == val:
            return True
    return False

def _$rapyd$_list_eq(other):
    if not _$rapyd$_arraylike(other):
        return False
    if this.length != other.length:
        return False
    for v'var i = 0; i < this.length; i++':
        if not (this[i] == other[i]):
            return False
    return True

def _$rapyd$_list_decorate(ans):
    ans.append = Array.prototype.push
    ans.toString = _$rapyd$_list_to_string
    ans.inspect = _$rapyd$_list_to_string
    ans.extend = _$rapyd$_list_extend
    ans.index = _$rapyd$_list_index
    ans.pypop = _$rapyd$_list_pop
    ans.remove = _$rapyd$_list_remove
    ans.insert = _$rapyd$_list_insert
    ans.copy = _$rapyd$_list_copy
    ans.clear = _$rapyd$_list_clear
    ans.count = _$rapyd$_list_count
    ans.concat = _$rapyd$_list_concat
    ans.pysort = _$rapyd$_list_sort
    ans.slice = _$rapyd$_list_slice
    ans.as_array = _$rapyd$_list_as_array
    ans.__len__ = _$rapyd$_list_len
    ans.__contains__ = _$rapyd$_list_contains
    ans.__eq__ = _$rapyd$_list_eq
    ans.constructor = _$rapyd$_list_constructor
    if type(ans[_$rapyd$_iterator_symbol]) is not 'function':
        # Happens on ES 5 runtimes
        ans[_$rapyd$_iterator_symbol] = _$rapyd$_list_iterator
    return ans

def _$rapyd$_list_constructor(iterable):
    if iterable is undefined:
        ans = v'[]'
    elif _$rapyd$_arraylike(iterable):
        ans = new Array(iterable.length)
        for v'var i = 0; i < iterable.length; i++':
            ans[i] = iterable[i]  # noqa:undef
    elif type(iterable[_$rapyd$_iterator_symbol]) is 'function':
        iterator = (type(Map) is 'function' and isinstance(iterable, Map)) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]()
        ans = []
        result = iterator.next()
        while not result.done:
            ans.push(result.value)
            result = iterator.next()
    elif type(iterable) is 'number':
        # non-pythonic optimization to allocate all needed memory in a single operation
        ans = new Array(iterable)
    else:
        ans = Object.keys(iterable)
    return _$rapyd$_list_decorate(ans)
_$rapyd$_list_constructor.__name__ = 'list'

v'var list = _$rapyd$_list_constructor, list_wrap = _$rapyd$_list_decorate'

def sorted(iterable, key=None, reverse=False):
    ans = _$rapyd$_list_constructor(iterable)
    ans.pysort(key, reverse)
    return ans
# }}}

# set {{{
v'var _$rapyd$_global_object_id = 0, _$rapyd$_set_implementation'

def _$rapyd$_set_keyfor(x):
    t = type(x)
    if t is 'string' or t is 'number' or t is 'boolean':
        return '_' + t[0] + x
    if v'x === null': # also matches undefined
        return "__!@#$0"
    ans = x._$rapyd$_hash_key_prop
    if ans is undefined:
        v'ans = "_!@#$" + (++_$rapyd$_global_object_id)'
        Object.defineProperty(x, '_$rapyd$_hash_key_prop', { 'value': ans })
    return ans

def _$rapyd$_set_polyfill():
    this._store = {}
    this.size = 0

_$rapyd$_set_polyfill.prototype.add = def(x):
    key = _$rapyd$_set_keyfor(x)
    if not Object.hasOwnProperty.call(this._store, key):
        this.size += 1
        this._store[key] = x
    return this

_$rapyd$_set_polyfill.prototype.clear = def(x):
    this._store = {}
    this.size = 0

_$rapyd$_set_polyfill.prototype.delete = def(x):
    key = _$rapyd$_set_keyfor(x)
    if Object.hasOwnProperty.call(this._store, key):
        this.size -= 1
        v'delete this._store[key]'
        return True
    return False

_$rapyd$_set_polyfill.prototype.has = def(x):
    return Object.hasOwnProperty.call(this._store, _$rapyd$_set_keyfor(x))

_$rapyd$_set_polyfill.prototype.values = def(x):
    keys = Object.keys(this._store)
    s = this._store
    return {
        '_keys': keys,
        '_i': -1,
        '_s':s,
        _$rapyd$_iterator_symbol: def (): return this;,
        'next':def():
            this._i += 1
            if this._i >= this._keys.length:
                return {'done': True}
            return {'done':False, 'value':s[this._keys[this._i]]}
    }

if type(Set) is not 'function' or type(Set.prototype.delete) is not 'function':
    v'_$rapyd$_set_implementation = _$rapyd$_set_polyfill'
else:
    v'_$rapyd$_set_implementation = Set'

def _$rapyd$_set(iterable):
    if isinstance(this, _$rapyd$_set):
        this.jsset = new _$rapyd$_set_implementation()  # noqa:undef
        ans = this
        if iterable is undefined:
            return ans
        s = ans.jsset
        if _$rapyd$_arraylike(iterable):
            for v'var i = 0; i < iterable.length; i++':
                s.add(iterable[i])
        elif type(iterable[_$rapyd$_iterator_symbol]) is 'function':
            iterator = (type(Map) is 'function' and isinstance(iterable, Map)) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]()
            result = iterator.next()
            while not result.done:
                s.add(result.value)
                result = iterator.next()
        else:
            keys = Object.keys(iterable)
            for v'var j=0; j < keys.length; j++':
                s.add(keys[j])
        return ans
    else:
        return new _$rapyd$_set(iterable)
_$rapyd$_set.prototype.__name__ = 'set'

# These are for JavaScript users' convenience
Object.defineProperties(_$rapyd$_set.prototype, {
    'length': { 'get': def(): return this.jsset.size; },
    'size': { 'get': def(): return this.jsset.size; },
})

_$rapyd$_set.prototype.__len__ = def(): return this.jsset.size
_$rapyd$_set.prototype.has = _$rapyd$_set.prototype.__contains__ = def(x): return this.jsset.has(x)
_$rapyd$_set.prototype.add = def(x): this.jsset.add(x)
_$rapyd$_set.prototype.clear = def(): this.jsset.clear()
_$rapyd$_set.prototype.copy = def(): return _$rapyd$_set(this)
_$rapyd$_set.prototype.discard = def(x): this.jsset.delete(x)
_$rapyd$_set.prototype[_$rapyd$_iterator_symbol] = def(): return this.jsset.values()

_$rapyd$_set.prototype.difference = def():
    ans = new _$rapyd$_set()
    s = ans.jsset
    iterator = this.jsset.values()
    r = iterator.next()
    while not r.done:
        x = r.value
        has = False
        for v'var i = 0; i < arguments.length; i++':
            if arguments[i].has(x):  # noqa:undef
                has = True
                break
        if not has:
            s.add(x)
        r = iterator.next()
    return ans

_$rapyd$_set.prototype.difference_update = def():
    s = this.jsset
    remove = v'[]'
    iterator = s.values()
    r = iterator.next()
    while not r.done:
        x = r.value
        for v'var i = 0; i < arguments.length; i++':
            if arguments[i].has(x):  # noqa:undef
                remove.push(x)
                break
        r = iterator.next()
    for v'var j = 0; j < remove.length; j++':
        s.delete(remove[j])  # noqa:undef

_$rapyd$_set.prototype.intersection = def():
    ans = new _$rapyd$_set()
    s = ans.jsset
    iterator = this.jsset.values()
    r = iterator.next()
    while not r.done:
        x = r.value
        has = True
        for v'var i = 0; i < arguments.length; i++':
            if not arguments[i].has(x):  # noqa:undef
                has = False
                break
        if has:
            s.add(x)
        r = iterator.next()
    return ans

_$rapyd$_set.prototype.intersection_update = def():
    s = this.jsset
    remove = v'[]'
    iterator = s.values()
    r = iterator.next()
    while not r.done:
        x = r.value
        for v'var i = 0; i < arguments.length; i++':
            if not arguments[i].has(x):  # noqa:undef
                remove.push(x)
                break
        r = iterator.next()
    for v'var j = 0; j < remove.length; j++':
        s.delete(remove[j])  # noqa:undef

_$rapyd$_set.prototype.isdisjoint = def(other):
    iterator = this.jsset.values()
    r = iterator.next()
    while not r.done:
        x = r.value
        if other.has(x):
            return False
        r = iterator.next()
    return True

_$rapyd$_set.prototype.issubset = def(other):
    iterator = this.jsset.values()
    r = iterator.next()
    while not r.done:
        x = r.value
        if not other.has(x):
            return False
        r = iterator.next()
    return True

_$rapyd$_set.prototype.issuperset = def(other):
    s = this.jsset
    iterator = other.jsset.values()
    r = iterator.next()
    while not r.done:
        x = r.value
        if not s.has(x):
            return False
        r = iterator.next()
    return True

_$rapyd$_set.prototype.pop = def():
    iterator = this.jsset.values()
    r = iterator.next()
    if r.done:
        raise KeyError('pop from an empty set')
    this.jsset.delete(r.value)
    return r.value

_$rapyd$_set.prototype.remove = def(x):
    if not this.jsset.delete(x):
        raise KeyError(x.toString())

_$rapyd$_set.prototype.symmetric_difference = def(other):
    return this.union(other).difference(this.intersection(other))

_$rapyd$_set.prototype.symmetric_difference_update = def(other):
    common = this.intersection(other)
    this.update(other)
    this.difference_update(common)

_$rapyd$_set.prototype.union = def():
    ans = _$rapyd$_set(this)
    ans.update.apply(ans, arguments)
    return ans

_$rapyd$_set.prototype.update = def():
    s = this.jsset
    for v'var i=0; i < arguments.length; i++':
        iterator = arguments[i][_$rapyd$_iterator_symbol]()  # noqa:undef
        r = iterator.next()
        while not r.done:
            s.add(r.value)
            r = iterator.next()

_$rapyd$_set.prototype.toString = _$rapyd$_set.prototype.inspect = def():
    return '{' + list(this).join(', ') + '}'

_$rapyd$_set.prototype.__eq__ = def(other):
    if not isinstance(other, this.constructor):
        return False
    if other.size is not this.size:
        return False
    if other.size is 0:
        return True
    iterator = other[_$rapyd$_iterator_symbol]()
    r = iterator.next()
    while not r.done:
        if not this.has(r.value):
            return False
        r = iterator.next()
    return True

def _$rapyd$_set_wrap(x):
    ans = new _$rapyd$_set()
    ans.jsset = x
    return ans

v'var set = _$rapyd$_set, set_wrap = _$rapyd$_set_wrap'
# }}}

# dict {{{
v'var _$rapyd$_dict_implementation'

def _$rapyd$_dict_polyfill():
    this._store = {}
    this.size = 0

_$rapyd$_dict_polyfill.prototype.set = def(x, value):
    key = _$rapyd$_set_keyfor(x)
    if not Object.hasOwnProperty.call(this._store, key):
        this.size += 1
    this._store[key] = v'[x, value]'
    return this

_$rapyd$_dict_polyfill.prototype.clear = def(x):
    this._store = {}
    this.size = 0

_$rapyd$_dict_polyfill.prototype.delete = def(x):
    key = _$rapyd$_set_keyfor(x)
    if Object.hasOwnProperty.call(this._store, key):
        this.size -= 1
        v'delete this._store[key]'
        return True
    return False

_$rapyd$_dict_polyfill.prototype.has = def(x):
    return Object.hasOwnProperty.call(this._store, _$rapyd$_set_keyfor(x))

_$rapyd$_dict_polyfill.prototype.get = def(x):
    try:
        return this._store[_$rapyd$_set_keyfor(x)][1]
    except TypeError:  # Key is not present
        return undefined

_$rapyd$_dict_polyfill.prototype.values = def(x):
    keys = Object.keys(this._store)
    s = this._store
    return {
        '_keys': keys,
        '_i': -1,
        '_s':s,
        _$rapyd$_iterator_symbol: def (): return this;,
        'next':def():
            this._i += 1
            if this._i >= this._keys.length:
                return {'done': True}
            return {'done':False, 'value':s[this._keys[this._i]][1]}
    }

_$rapyd$_dict_polyfill.prototype.keys = def(x):
    keys = Object.keys(this._store)
    s = this._store
    return {
        '_keys': keys,
        '_i': -1,
        '_s':s,
        _$rapyd$_iterator_symbol: def (): return this;,
        'next':def():
            this._i += 1
            if this._i >= this._keys.length:
                return {'done': True}
            return {'done':False, 'value':s[this._keys[this._i]][0]}
    }

_$rapyd$_dict_polyfill.prototype.entries = def(x):
    keys = Object.keys(this._store)
    s = this._store
    return {
        '_keys': keys,
        '_i': -1,
        '_s':s,
        _$rapyd$_iterator_symbol: def (): return this;,
        'next':def():
            this._i += 1
            if this._i >= this._keys.length:
                return {'done': True}
            return {'done':False, 'value':s[this._keys[this._i]]}
    }

if type(Map) is not 'function' or type(Map.prototype.delete) is not 'function':
    v'_$rapyd$_dict_implementation = _$rapyd$_dict_polyfill'
else:
    v'_$rapyd$_dict_implementation = Map'

def _$rapyd$_dict(iterable):
    if isinstance(this, _$rapyd$_dict):
        this.jsmap = new _$rapyd$_dict_implementation()  # noqa:undef
        if iterable is not undefined:
            this.update(iterable)
        return this
    else:
        return new _$rapyd$_dict(iterable)
_$rapyd$_dict.prototype.__name__ = 'dict'


# These are for JavaScript users' convenience
Object.defineProperties(_$rapyd$_dict.prototype, {
    'length': { 'get': def(): return this.jsmap.size; },
    'size': { 'get': def(): return this.jsmap.size; },
})

_$rapyd$_dict.prototype.__len__ = def(): return this.jsmap.size
_$rapyd$_dict.prototype.has = _$rapyd$_dict.prototype.__contains__ = def(x): return this.jsmap.has(x)
_$rapyd$_dict.prototype.set = _$rapyd$_dict.prototype.__setitem__ = def(key, value): this.jsmap.set(key, value)
_$rapyd$_dict.prototype.clear = def(): this.jsmap.clear()
_$rapyd$_dict.prototype.copy = def(): return _$rapyd$_dict(this)
_$rapyd$_dict.prototype.keys = def(): return this.jsmap.keys()
_$rapyd$_dict.prototype.values = def(): return this.jsmap.values()
_$rapyd$_dict.prototype.items = _$rapyd$_dict.prototype.entries = def(): return this.jsmap.entries()
_$rapyd$_dict.prototype[_$rapyd$_iterator_symbol] = def(): return this.jsmap.keys()

_$rapyd$_dict.prototype.__getitem__ = def (key):
    ans = this.jsmap.get(key)
    if ans is undefined and not this.jsmap.has(key):
        raise KeyError(key + '')
    return ans

_$rapyd$_dict.prototype.get = def (key, defval):
    ans = this.jsmap.get(key)
    if ans is undefined and not this.jsmap.has(key):
        return (defval is undefined) ? None : defval
    return ans

_$rapyd$_dict.prototype.set_default = def (key, defval):
    j = this.jsmap
    if not j.has(key):
        j.set(key, defval)
        return defval
    return j.get(key)

_$rapyd$_dict.fromkeys = _$rapyd$_dict.prototype.fromkeys = def (iterable, value=None):
    ans = _$rapyd$_dict()
    iterator = iter(iterable)
    r = iterator.next()
    while not r.done:
        ans.set(r.value, value)
        r = iterator.next()
    return ans

_$rapyd$_dict.prototype.pop = def (key, defval):
    ans = this.jsmap.get(key)
    if ans is undefined and not this.jsmap.has(key):
        if defval is undefined:
            raise KeyError(key)
        return defval
    this.jsmap.delete(key)
    return ans

_$rapyd$_dict.prototype.popitem = def ():
    r = this.jsmap.entries().next()
    if r.done:
        raise KeyError('dict is empty')
    this.jsmap.delete(r.value[0])
    return r.value

_$rapyd$_dict.prototype.update = def ():
    if arguments.length is 0:
        return
    m = this.jsmap
    iterable = arguments[0]
    if Array.isArray(iterable):
        for v'var i = 0; i < iterable.length; i++':
            m.set(iterable[i][0], iterable[i][1])
    elif isinstance(iterable, _$rapyd$_dict):
        iterator = iterable.items()
        result = iterator.next()
        while not result.done:
            m.set(result.value[0], result.value[1])
            result = iterator.next()
    elif type(Map) is 'function' and isinstance(iterable, Map):
        iterator = iterable.entries()
        result = iterator.next()
        while not result.done:
            m.set(result.value[0], result.value[1])
            result = iterator.next()
    elif type(iterable[_$rapyd$_iterator_symbol]) is 'function':
        iterator = iterable[_$rapyd$_iterator_symbol]()
        result = iterator.next()
        while not result.done:
            m.set(result.value[0], result.value[1])
            result = iterator.next()
    else:
        keys = Object.keys(iterable)
        for v'var j=0; j < keys.length; j++':
            if keys[j] is not _$rapyd$_iterator_symbol:
                m.set(keys[j], iterable[keys[j]])
    if arguments.length > 1:
        _$rapyd$_dict.prototype.update.call(this, arguments[1])

_$rapyd$_dict.prototype.toString = _$rapyd$_dict.prototype.inspect = def():
    entries = v'[]'
    iterator = this.jsmap.entries()
    r = iterator.next()
    while not r.done:
        entries.push(r.value[0] + ': ' + r.value[1])
        r = iterator.next()
    return '{' + entries.join(', ') + '}'

_$rapyd$_dict.prototype.__eq__ = def(other):
    if not isinstance(other, this.constructor):
        return False
    if other.size is not this.size:
        return False
    if other.size is 0:
        return True
    iterator = other.items()
    r = iterator.next()
    while not r.done:
        x = this.jsmap.get(r.value[0])
        if (x is undefined and not this.jsmap.has(r.value[0])) or x is not r.value[1]:
            return False
        r = iterator.next()
    return True

_$rapyd$_dict.prototype.as_object = def(other):
    ans = {}
    iterator = this.jsmap.entries()
    r = iterator.next()
    while not r.done:
        ans[r.value[0]] = r.value[1]
        r = iterator.next()
    return ans

def _$rapyd$_dict_wrap(x):
    ans = new _$rapyd$_dict()
    ans.jsmap = x
    return ans

v'var dict = _$rapyd$_dict, dict_wrap = _$rapyd$_dict_wrap'

# }}}
