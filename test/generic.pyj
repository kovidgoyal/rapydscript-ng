def throw_test(code):
    orig, RapydScript.AST_Node.warn_function = RapydScript.AST_Node.warn_function, def():pass
    assert.throws(def():
        RapydScript.parse(code, {'filename':code}).body[0]
    , RapydScript.SyntaxError)
    RapydScript.AST_Node.warn_function = orig

# arithmetic
assert.equal(3**4, Math.pow(3, 4))
assert.equal(100**-2, Math.pow(100, -2))
assert.equal(2*5**2*3, 150)
assert.equal(100 // 3, 33)
assert.equal(-100 // 3, -34)
a = 100
a //= 3
assert.equal(a, 33)
assert.equal(0b11, 3)

# comparisons
assert.ok(3<5<7)

# Empty tuple
assert.deepEqual((), [])

# Conditional operators
assert.equal((True) ? 1: 2, 1)
assert.equal(1 if True else 2, 1)
assert.equal(1
             if True else 2, 1)
assert.deepEqual([x for x in ("asd" if True else "xyz") if x], 'asd'.split(''))
assert.deepEqual((1, [x for x in [2] if x]), [1, [2]])

# Comprehensions
assert.deepEqual([a+1 for a in [1,2,3] if a > 1], [3, 4])
assert.deepEqual({a+1:a+2 for a in [1,2,3] if a > 1}, {3:4, 4:5})
assert.deepEqual({a+1 for a in [1,2,3] if a > 1}, set([3, 4]))
assert.deepEqual([(a+1, 1) for a in [1,2,3] if a > 1], [[3, 1], [4, 1]])

# Destructuring assignment
a, (b, (c, d)), e = [1, [2, [3, 4]], 5]
assert.deepEqual([a, b, c, d, e], [1, 2, 3, 4, 5])
for x, (y, z) in [ [1, [2, 3]] ]:
    assert.deepEqual([x, y, z], [1, 2, 3])
assert.deepEqual([ [x, y, z, w] for ((x, y), (z, w)) in [ [[1, 2], [3, 4]] ] ],
                 [[1, 2, 3, 4]])
assert.deepEqual([ [x, y, z] for x, (y, z) in [ [1, [2, 3] ] ]],
                 [[1, 2, 3]])
(a, b) = [1, 2]
assert.deepEqual([a, b], [1, 2])
(a, (b, c)) = [1, [2, 3]]
assert.deepEqual([a, b, c], [1, 2, 3])

# Chained assignment
a = b = 11
assert.deepEqual([a, b], [11, 11])
def inc():
    nonlocal a
    a += 1
    return a
a = b = inc()
assert.deepEqual([a, b], [12, 12])
a, b = c, d = 1, 2
assert.deepEqual([a, b, c, d], [1, 2, 1, 2])
(a, b) = [c, d] = 1, 2
assert.deepEqual([a, b, c, d], [1, 2, 1, 2])
a, (x, b) = c, d = [1, [2, 3]]
assert.deepEqual([a, x, b, c, d], [1, 2, 3, 1, [2, 3]])
a, b = [c, d] = [e, f] = [1, 2]
assert.deepEqual([a, b, c, d, e, f], [1, 2, 1, 2, 1, 2])

throw_test('a += b += 1')
throw_test('a += 1, 2 += b')
throw_test('a += [1, 2] += b')

# object literals
{1:
 1
   }  # Check that arbitrary indentation is allowed after : for an object literal key

# strict equality
assert(1 == 1)                  # number vs number: ok
assert(True == True)            # boolean vs boolean: ok
assert(not (1 == True))         # number vs boolean: NEVER equal
assert(1 != True)               # number vs boolean: NEVER equal
assert(not ("" == False))       # string vs boolean: NEVER equal
assert(not ("0" == 0))          # string vs integer: NEVER equal
assert(not ("" == 0))           # string vs integer: NEVER equal
assert(bool(1) == True)         # boolean conversion
assert(bool("") == False)       # boolean conversion
assert(v'1 == true')         # javascript override
assert(not v'(1 != true)')   # javascript override
assert(v'String("test")' == "test")  # this should do string conversion rather than creating a string object
assert(String("test") != "test")        # this should create a string object


# raw JavaScript
v'var def = {}'                # ability to bypass reserved keywords in declaration
v'def'.item = 3            # ability to use reserved keywords
assert(v'def.item' == 3)

n = 5
assert.equal(v"""
(function() {
    var s = 0
    for (var i=0; i<=n; i++) {
        s += i
    }
    return s
})()
""", (def():
    s = 0
    for i in range(n+1):
        s += i
    return s
)())                        # shared scoping and equivalent capability
a = []
for v'var i = 0; i < 1; i++':
    a[i] = 1  # noqa: undef
assert.deepEqual(a, [1])

# String literal concatenation

assert.equal('1' '2', '12')
assert.equal('1'
             '2' '3', '123')
assert.equal(u'a', 'a')

# Various bits of miscellaneous code that caused parser infinite loops and other breakage
throw_test('for a in b:\\n 1+1')

def localvars_in_comprehension():
    return {k:i for i, k in enumerate([1,2])}
assert.deepEqual(localvars_in_comprehension(), {'1':0, '2':1})

# Numbers
assert.equal(1e2, 100)
assert.equal(-1e2, -100)
assert.equal(1e+2, 100)
assert.equal(1E-1, 0.1)

# Equality operators

class D:

    def __init__(self, data):
        self.data = data

    def __eq__(self, other):
        return self.data == other.data

assert.ok(D(1) == D(1))
assert.ok(D(2) != D(1))
assert.ok(D(1) == {'data':1})
assert.ok({'data':1} == D(1))

arr = []
{} == arr.append(2)
assert.ok(arr.length is 1)

call_count = 0
def cc():
    nonlocal call_count
    call_count += 1
    return [1]
cc()[-1]
assert.equal(call_count, 1)
