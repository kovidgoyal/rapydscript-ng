{
  "abs()": "function abs() {\n            return Math.abs;\n        }",
  "max()": "function max() {\n            return Math.max;\n        }",
  "min()": "function min() {\n            return Math.min;\n        }",
  "dir": "function dir(item) {\n            var arr;\n            arr = _$rapyd$_list_decorate([]);\n            for (var i in item) {\n                arr.push(i);\n            }\n            return arr;\n        }",
  "ord": "function ord(x) {\n            var ans, second;\n            ans = x.charCodeAt(0);\n            if (55296 <= ans && ans <= 56319) {\n                second = x.charCodeAt(1);\n                if (56320 <= second && second <= 57343) {\n                    return (ans - 55296) * 1024 + second - 56320 + 65536;\n                }\n                throw new TypeError(\"string is missing the low surrogate char\");\n            }\n            return ans;\n        }",
  "chr": "function chr(code) {\n            if (code <= 65535) {\n                return String.fromCharCode(code);\n            }\n            code -= 65536;\n            return String.fromCharCode(55296 + (code >> 10), 56320 + (code & 1023));\n        }",
  "bin": "function bin(x) {\n            var ans;\n            if (typeof x !== \"number\" || x % 1 !== 0) {\n                throw new TypeError(\"integer required\");\n            }\n            ans = x.toString(2);\n            if (ans[0] === \"-\") {\n                ans = \"-\" + \"0b\" + ans.slice(1);\n            } else {\n                ans = \"0b\" + ans;\n            }\n            return ans;\n        }",
  "hex": "function hex(x) {\n            var ans;\n            if (typeof x !== \"number\" || x % 1 !== 0) {\n                throw new TypeError(\"integer required\");\n            }\n            ans = x.toString(16);\n            if (ans[0] === \"-\") {\n                ans = \"-\" + \"0x\" + ans.slice(1);\n            } else {\n                ans = \"0x\" + ans;\n            }\n            return ans;\n        }",
  "callable": "function callable(x) {\n            return typeof x === \"function\";\n        }",
  "enumerate": "function enumerate(iterable) {\n            var ans, iterator;\n            if (_$rapyd$_arraylike(iterable)) {\n                ans = {\n                    \"_i\": -1,\n                    \"next\": (function() {\n                        var _$rapyd$_anonfunc = function () {\n                            this._i += 1;\n                            if (this._i < iterable.length) {\n                                return {\n                                    \"done\": false,\n                                    \"value\": _$rapyd$_list_decorate([ this._i, iterable[this._i] ])\n                                };\n                            }\n                            return {\n                                \"done\": true\n                            };\n                        };\n                        return _$rapyd$_anonfunc;\n                    })()\n                };\n                ans[_$rapyd$_iterator_symbol] = (function() {\n                    var _$rapyd$_anonfunc = function () {\n                        return this;\n                    };\n                    return _$rapyd$_anonfunc;\n                })();\n                return ans;\n            }\n            if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n                iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n                ans = {\n                    \"_iterator\": iterator,\n                    \"_i\": -1,\n                    \"next\": (function() {\n                        var _$rapyd$_anonfunc = function () {\n                            var r;\n                            r = this._iterator.next();\n                            if (r.done) {\n                                return {\n                                    \"done\": true\n                                };\n                            }\n                            this._i += 1;\n                            return {\n                                \"done\": false,\n                                \"value\": _$rapyd$_list_decorate([ this._i, r.value ])\n                            };\n                        };\n                        return _$rapyd$_anonfunc;\n                    })()\n                };\n                ans[_$rapyd$_iterator_symbol] = (function() {\n                    var _$rapyd$_anonfunc = function () {\n                        return this;\n                    };\n                    return _$rapyd$_anonfunc;\n                })();\n                return ans;\n            }\n            return enumerate(Object.keys(iterable));\n        }",
  "iter": "function iter(iterable) {\n            var ans;\n            if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n                return (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n            }\n            if (_$rapyd$_arraylike(iterable)) {\n                ans = {\n                    \"_i\": -1,\n                    \"next\": (function() {\n                        var _$rapyd$_anonfunc = function () {\n                            this._i += 1;\n                            if (this._i < iterable.length) {\n                                return {\n                                    \"done\": false,\n                                    \"value\": iterable[this._i]\n                                };\n                            }\n                            return {\n                                \"done\": true\n                            };\n                        };\n                        return _$rapyd$_anonfunc;\n                    })()\n                };\n                ans[_$rapyd$_iterator_symbol] = (function() {\n                    var _$rapyd$_anonfunc = function () {\n                        return this;\n                    };\n                    return _$rapyd$_anonfunc;\n                })();\n                return ans;\n            }\n            return iter(Object.keys(iterable));\n        }",
  "extends": "function _$rapyd$_extends(child, parent) {\n            child.prototype = Object.create(parent.prototype);\n            child.prototype.constructor = child;\n        }",
  "_$rapyd$_flatten": "function _$rapyd$_flatten(arr) {\n            var ans, value;\n            ans = _$rapyd$_list_decorate([]);\n            for (var i=0; i<arr.length; i++) {\n                value = arr[i];\n                if (Array.isArray(value)) {\n                    ans = ans.concat(_$rapyd$_flatten(value));\n                } else {\n                    ans.push(value);\n                }\n            }\n            return ans;\n        }",
  "_$rapyd$_in()": "function _$rapyd$_in() {\n            if (typeof Map === \"function\" && typeof Set === \"function\") {\n                return (function() {\n                    var _$rapyd$_anonfunc = function (val, arr) {\n                        if (typeof arr === \"string\") {\n                            return arr.indexOf(val) !== -1;\n                        }\n                        if (typeof arr.__contains__ === \"function\") {\n                            return arr.__contains__(val);\n                        }\n                        if ((arr instanceof Map || arr instanceof Set)) {\n                            return arr.has(val);\n                        }\n                        if (_$rapyd$_arraylike(arr)) {\n                            return _$rapyd$_list_contains.call(arr, val);\n                        }\n                        return Object.prototype.hasOwnProperty.call(arr, val);\n                    };\n\n                    _$rapyd$_anonfunc.__argnames__ = [\"val\", \"arr\"];\n                    return _$rapyd$_anonfunc;\n                })();\n            }\n            return (function() {\n                var _$rapyd$_anonfunc = function (val, arr) {\n                    if (typeof arr === \"string\") {\n                        return arr.indexOf(val) !== -1;\n                    }\n                    if (typeof arr.__contains__ === \"function\") {\n                        return arr.__contains__(val);\n                    }\n                    if (_$rapyd$_arraylike(arr)) {\n                        return _$rapyd$_list_contains.call(arr, val);\n                    }\n                    return Object.prototype.hasOwnProperty.call(arr, val);\n                };\n\n                _$rapyd$_anonfunc.__argnames__ = [\"val\", \"arr\"];\n                return _$rapyd$_anonfunc;\n            })();\n        }",
  "iterable": "function _$rapyd$_Iterable(iterable) {\n            var iterator, ans, result;\n            if (_$rapyd$_arraylike(iterable)) {\n                return iterable;\n            }\n            if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n                iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n                ans = _$rapyd$_list_decorate([]);\n                result = iterator.next();\n                while (!result.done) {\n                    ans.push(result.value);\n                    result = iterator.next();\n                }\n                return ans;\n            }\n            return Object.keys(iterable);\n        }",
  "len()": "function _$rapyd$_len() {\n            if (typeof Set === \"function\" && typeof Map === \"function\") {\n                return (function() {\n                    var _$rapyd$_anonfunc = function (obj) {\n                        if (_$rapyd$_arraylike(obj)) {\n                            return obj.length;\n                        }\n                        if (obj instanceof Set || obj instanceof Map) {\n                            return obj.size;\n                        }\n                        if (typeof obj.__len__ === \"function\") {\n                            return obj.__len__();\n                        }\n                        return Object.keys(obj).length;\n                    };\n\n                    _$rapyd$_anonfunc.__argnames__ = [\"obj\"];\n                    return _$rapyd$_anonfunc;\n                })();\n            }\n            return (function() {\n                var _$rapyd$_anonfunc = function (obj) {\n                    if (_$rapyd$_arraylike(obj)) {\n                        return obj.length;\n                    }\n                    if (typeof obj.__len__ === \"function\") {\n                        return obj.__len__();\n                    }\n                    return Object.keys(obj).length;\n                };\n\n                _$rapyd$_anonfunc.__argnames__ = [\"obj\"];\n                return _$rapyd$_anonfunc;\n            })();\n        }",
  "range": "function range(start, stop, step) {\n            var length;\n            if (arguments.length <= 1) {\n                stop = start || 0;\n                start = 0;\n            }\n            step = arguments[2] || 1;\n            length = Math.max(Math.ceil((stop - start) / step), 0);\n            return (function(){\n                var _$rapyd$_d = {};\n                _$rapyd$_d[_$rapyd$_iterator_symbol] = (function() {\n                    var _$rapyd$_anonfunc = function () {\n                        return this;\n                    };\n                    return _$rapyd$_anonfunc;\n                })();\n                _$rapyd$_d[\"_i\"] = start - step;\n                _$rapyd$_d[\"_idx\"] = -1;\n                _$rapyd$_d[\"next\"] = (function() {\n                    var _$rapyd$_anonfunc = function () {\n                        this._i += step;\n                        this._idx += 1;\n                        if (this._idx >= length) {\n                            return {\n                                \"done\": true\n                            };\n                        }\n                        return {\n                            \"done\": false,\n                            \"value\": this._i\n                        };\n                    };\n                    return _$rapyd$_anonfunc;\n                })();\n                return _$rapyd$_d;\n            })();\n        }",
  "reversed": "function reversed(iterable) {\n            var ans;\n            if (_$rapyd$_arraylike(iterable)) {\n                ans = {\n                    \"_i\": iterable.length,\n                    \"next\": (function() {\n                        var _$rapyd$_anonfunc = function () {\n                            this._i -= 1;\n                            if (this._i > -1) {\n                                return {\n                                    \"done\": false,\n                                    \"value\": iterable[this._i]\n                                };\n                            }\n                            return {\n                                \"done\": true\n                            };\n                        };\n                        return _$rapyd$_anonfunc;\n                    })()\n                };\n                ans[_$rapyd$_iterator_symbol] = (function() {\n                    var _$rapyd$_anonfunc = function () {\n                        return this;\n                    };\n                    return _$rapyd$_anonfunc;\n                })();\n                return ans;\n            }\n            throw new TypeError(\"reversed() can only be called on arrays or strings\");\n        }",
  "getattr": "function getattr(obj, name, defval) {\n            var ret;\n            try {\n                ret = obj[name];\n            } catch (_$rapyd$_Exception) {\n                if (_$rapyd$_Exception instanceof TypeError) {\n                    if (defval === undefined) {\n                        throw new AttributeError(\"The attribute \" + name + \" is not present\");\n                    }\n                    return defval;\n                } else {\n                    throw _$rapyd$_Exception;\n                }\n            }\n            if (ret === undefined && !(name in obj)) {\n                if (defval === undefined) {\n                    throw new AttributeError(\"The attribute \" + name + \" is not present\");\n                }\n                ret = defval;\n            }\n            return ret;\n        }",
  "setattr": "function setattr(obj, name, value) {\n            obj[name] = value;\n        }",
  "hasattr": "function hasattr(obj, name) {\n            return name in obj;\n        }",
  "_$rapyd$_desugar_kwargs()": "function _$rapyd$_desugar_kwargs() {\n            if (typeof Object.assign === \"function\") {\n                return (function() {\n                    var _$rapyd$_anonfunc = function () {\n                        var ans;\n                        ans = {};\n                        ans[_$rapyd$_kwargs_symbol] = true;\n                        for (var i = 0; i < arguments.length; i++) {\n                            Object.assign(ans, arguments[i]);\n                        }\n                        return ans;\n                    };\n                    return _$rapyd$_anonfunc;\n                })();\n            }\n            return (function() {\n                var _$rapyd$_anonfunc = function () {\n                    var ans, keys;\n                    ans = {};\n                    ans[_$rapyd$_kwargs_symbol] = true;\n                    for (var i = 0; i < arguments.length; i++) {\n                        keys = Object.keys(arguments[i]);\n                        for (var j = 0; j < keys.length; j++) {\n                            ans[keys[j]] = arguments[i][keys[j]];\n                        }\n                    }\n                    return ans;\n                };\n                return _$rapyd$_anonfunc;\n            })();\n        }",
  "_$rapyd$_interpolate_kwargs": "function _$rapyd$_interpolate_kwargs(f, supplied_args) {\n            var has_prop, kwobj, args, prop;\n            if (!f.__argnames__) {\n                return f.apply(this, supplied_args);\n            }\n            has_prop = Object.prototype.hasOwnProperty;\n            kwobj = supplied_args.pop();\n            if (f.__handles_kwarg_interpolation__) {\n                args = new Array(Math.max(supplied_args.length, f.__argnames__.length) + 1);\n                args[args.length-1] = kwobj;\n                for (var i = 0; i < args.length - 1; i++) {\n                    if (i < f.__argnames__.length) {\n                        prop = f.__argnames__[i];\n                        if (has_prop.call(kwobj, prop)) {\n                            args[i] = kwobj[prop];\n                            delete kwobj[prop];\n                        } else if (i < supplied_args.length) {\n                            args[i] = supplied_args[i];\n                        }\n                    } else {\n                        args[i] = supplied_args[i];\n                    }\n                }\n                return f.apply(this, args);\n            }\n            for (var i = 0; i < f.__argnames__.length; i++) {\n                prop = f.__argnames__[i];\n                if (has_prop.call(kwobj, prop)) {\n                    supplied_args[i] = kwobj[prop];\n                }\n            }\n            return f.apply(this, supplied_args);\n        }",
  "_$rapyd$_interpolate_kwargs_constructor": "function _$rapyd$_interpolate_kwargs_constructor(apply, f, supplied_args) {\n            if (apply) {\n                f.apply(this, supplied_args);\n            } else {\n                _$rapyd$_interpolate_kwargs.call(this, f, supplied_args);\n            }\n            return this;\n        }",
  "#dependencies#": {
    "builtins": {
      "_$rapyd$_interpolate_kwargs": true,
      "_$rapyd$_interpolate_kwargs_constructor": true
    },
    "containers": {
      "_$rapyd$_interpolate_kwargs": true,
      "_$rapyd$_interpolate_kwargs_constructor": true,
      "min()": true,
      "max()": true,
      "iter": true
    },
    "errors": {
      "extends": true,
      "_$rapyd$_interpolate_kwargs": true,
      "_$rapyd$_interpolate_kwargs_constructor": true
    },
    "itertools": {
      "_$rapyd$_interpolate_kwargs": true,
      "iter": true,
      "_$rapyd$_interpolate_kwargs_constructor": true
    },
    "str": {
      "_$rapyd$_interpolate_kwargs": true,
      "_$rapyd$_interpolate_kwargs_constructor": true,
      "getattr": true,
      "max()": true,
      "_$rapyd$_in()": true
    }
  },
  "builtins": "function _$rapyd$_bool(val) {\n    return !!val;\n};\n\n_$rapyd$_bool.__argnames__ = [\"val\"];\n\nfunction _$rapyd$_bind(fn, thisArg) {\n    var ret;\n    if (fn.orig) {\n        fn = fn.orig;\n    }\n    if (thisArg === false) {\n        return fn;\n    }\n    ret = (function() {\n        var _$rapyd$_anonfunc = function () {\n            return fn.apply(thisArg, arguments);\n        };\n        return _$rapyd$_anonfunc;\n    })();\n    ret.orig = fn;\n    return ret;\n};\n\n_$rapyd$_bind.__argnames__ = [\"fn\", \"thisArg\"];\n\nfunction _$rapyd$_rebind_all(thisArg, rebind) {\n    if (typeof rebind === \"undefined\") {\n        rebind = true;\n    }\n    for (var p in thisArg) {\n        if (thisArg[p] && thisArg[p].orig) {\n            if (rebind) {\n                thisArg[p] = _$rapyd$_bind(thisArg[p], thisArg);\n            } else {\n                thisArg[p] = thisArg[p].orig;\n            }\n        }\n    }\n};\n\n_$rapyd$_rebind_all.__argnames__ = [\"thisArg\", \"rebind\"];\n\nfunction _$rapyd$_eslice(arr, step, start, end) {\n    var isString;\n    arr = arr.slice(0);\n    if (typeof arr === \"string\" || arr instanceof String) {\n        isString = true;\n        arr = arr.split(\"\");\n    }\n    if (step < 0) {\n        step = -step;\n        arr.reverse();\n        if (typeof start !== \"undefined\") {\n            start = arr.length - start - 1;\n        }\n        if (typeof end !== \"undefined\") {\n            end = arr.length - end - 1;\n        }\n    }\n    if (typeof start === \"undefined\") {\n        start = 0;\n    }\n    if (typeof end === \"undefined\") {\n        end = arr.length;\n    }\n    arr = arr.slice(start, end).filter((function() {\n        var _$rapyd$_anonfunc = function (e, i) {\n            return i % step === 0;\n        };\n\n        _$rapyd$_anonfunc.__argnames__ = [\"e\", \"i\"];\n        return _$rapyd$_anonfunc;\n    })());\n    return (isString) ? arr.join(\"\") : arr;\n};\n\n_$rapyd$_eslice.__argnames__ = [\"arr\", \"step\", \"start\", \"end\"];\n\nfunction _$rapyd$_mixin(target, source, overwrite) {\n    for (var i in source) {\n        if (source.hasOwnProperty(i) && overwrite || typeof target[i] === \"undefined\") {\n            target[i] = source[i];\n        }\n    }\n};\n\n_$rapyd$_mixin.__argnames__ = [\"target\", \"source\", \"overwrite\"];\n\nfunction _$rapyd$_print() {\n    var parts;\n    if (typeof console === \"object\") {\n        parts = [];\n        for (var i = 0; i < arguments.length; i++) {\n            parts.push(_$rapyd$_str(arguments[i]));\n        }\n        console.log(parts.join(\" \"));\n    }\n};\n\nfunction _$rapyd$_int(val, base) {\n    var ans;\n    ans = parseInt(val, base || 10);\n    if (isNaN(ans)) {\n        throw new ValueError(\"Invalid literal for int with base \" + (base || 10) + \": \" + val);\n    }\n    return ans;\n};\n\n_$rapyd$_int.__argnames__ = [\"val\", \"base\"];\n\nfunction _$rapyd$_float() {\n    var ans;\n    ans = parseFloat.apply(null, arguments);\n    if (isNaN(ans)) {\n        throw new ValueError(\"Could not convert string to float: \" + arguments[0]);\n    }\n    return ans;\n};\n\nfunction _$rapyd$_arraylike_creator() {\n    var names;\n    names = \"Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array\".split(\" \");\n    if (typeof HTMLCollection === \"function\") {\n        names = names.concat(\"HTMLCollection NodeList NamedNodeMap\".split(\" \"));\n    }\n    return (function() {\n        var _$rapyd$_anonfunc = function (x) {\n            if (Array.isArray(x) || typeof x === \"string\" || names.indexOf(Object.prototype.toString.call(x).slice(8, -1)) > -1) {\n                return true;\n            }\n            return false;\n        };\n\n        _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n        return _$rapyd$_anonfunc;\n    })();\n};\n\nfunction options_object(f) {\n    return (function() {\n        var _$rapyd$_anonfunc = function () {\n            if (typeof arguments[arguments.length - 1] === \"object\") {\n                arguments[arguments.length - 1][_$rapyd$_kwargs_symbol] = true;\n            }\n            return f.apply(this, arguments);\n        };\n        return _$rapyd$_anonfunc;\n    })();\n};\n\noptions_object.__argnames__ = [\"f\"];\n\nfunction _$rapyd$_id(x) {\n    return x._$rapyd$_object_id;\n};\n\n_$rapyd$_id.__argnames__ = [\"x\"];\n\nvar bool = _$rapyd$_bool, bind = _$rapyd$_bind, rebind_all = _$rapyd$_rebind_all;\nvar float = _$rapyd$_float, int = _$rapyd$_int, arraylike = _$rapyd$_arraylike_creator(), _$rapyd$_arraylike = arraylike;\nvar mixin = _$rapyd$_mixin, print = _$rapyd$_print, eslice = _$rapyd$_eslice, id = _$rapyd$_id;",
  "containers": "var _$rapyd$_chain_assign_temp;\nfunction _$rapyd$_equals(a, b) {\n    var _$rapyd$_unpack, akeys, bkeys, key;\n    if (a === b) {\n        return true;\n    }\n    if (a && typeof a.__eq__ === \"function\") {\n        return a.__eq__(b);\n    }\n    if (b && typeof b.__eq__ === \"function\") {\n        return b.__eq__(a);\n    }\n    if (_$rapyd$_arraylike(a) && _$rapyd$_arraylike(b)) {\n        if ((a.length !== b.length && (typeof a.length !== \"object\" || _$rapyd$_not_equals(a.length, b.length)))) {\n            return false;\n        }\n        for (var i=0; i < a.length; i++) {\n            if (!((a[i] === b[i] || typeof a[i] === \"object\" && _$rapyd$_equals(a[i], b[i])))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (a && b && a.constructor === b.constructor && a.constructor === Object) {\n        _$rapyd$_unpack = [Object.keys(a), Object.keys(b)];\n        akeys = _$rapyd$_unpack[0];\n        bkeys = _$rapyd$_unpack[1];\n        if (akeys.length !== bkeys.length) {\n            return false;\n        }\n        for (var j=0; j < akeys.length; j++) {\n            key = akeys[j];\n            if (!((a[key] === b[key] || typeof a[key] === \"object\" && _$rapyd$_equals(a[key], b[key])))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n_$rapyd$_equals.__argnames__ = [\"a\", \"b\"];\n\nfunction _$rapyd$_not_equals(a, b) {\n    if (a === b) {\n        return false;\n    }\n    if (a && typeof a.__ne__ === \"function\") {\n        return a.__ne__(b);\n    }\n    if (b && typeof b.__ne__ === \"function\") {\n        return b.__ne__(a);\n    }\n    return !_$rapyd$_equals(a, b);\n};\n\n_$rapyd$_not_equals.__argnames__ = [\"a\", \"b\"];\n\nvar equals = _$rapyd$_equals;\nfunction _$rapyd$_list_extend(iterable) {\n    var start, iterator, result;\n    if (Array.isArray(iterable) || typeof iterable === \"string\") {\n        start = this.length;\n        this.length += iterable.length;\n        for (var i = 0; i < iterable.length; i++) {\n            this[start + i] = iterable[i];\n        }\n    } else {\n        iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n        result = iterator.next();\n        while (!result.done) {\n            this.push(result.value);\n            result = iterator.next();\n        }\n    }\n};\n\n_$rapyd$_list_extend.__argnames__ = [\"iterable\"];\n\nfunction _$rapyd$_list_index(val, start, stop) {\n    var idx;\n    start = start || 0;\n    if (start < 0) {\n        start = this.length + start;\n    }\n    if (start < 0) {\n        throw new ValueError(val + \" is not in list\");\n    }\n    if (stop === undefined) {\n        idx = this.indexOf(val, start);\n        if (idx === -1) {\n            throw new ValueError(val + \" is not in list\");\n        }\n        return idx;\n    }\n    if (stop < 0) {\n        stop = this.length + stop;\n    }\n    for (var i = start; i < stop; i++) {\n        if ((this[i] === val || typeof this[i] === \"object\" && _$rapyd$_equals(this[i], val))) {\n            return i;\n        }\n    }\n    throw new ValueError(val + \" is not in list\");\n};\n\n_$rapyd$_list_index.__argnames__ = [\"val\", \"start\", \"stop\"];\n\nfunction _$rapyd$_list_pop(index) {\n    var ans;\n    if (this.length === 0) {\n        throw new IndexError(\"list is empty\");\n    }\n    ans = this.splice(index, 1);\n    if (!ans.length) {\n        throw new IndexError(\"pop index out of range\");\n    }\n    return ans[0];\n};\n\n_$rapyd$_list_pop.__argnames__ = [\"index\"];\n\nfunction _$rapyd$_list_remove(value) {\n    var idx;\n    idx = this.indexOf(value);\n    if (idx === -1) {\n        throw new ValueError(value + \" not in list\");\n    }\n    this.splice(idx, 1);\n};\n\n_$rapyd$_list_remove.__argnames__ = [\"value\"];\n\nfunction _$rapyd$_list_to_string() {\n    return \"[\" + this.join(\", \") + \"]\";\n};\n\nfunction _$rapyd$_list_insert(index, val) {\n    if (index < 0) {\n        index += this.length;\n    }\n    index = min(this.length, max(index, 0));\n    if (index === 0) {\n        this.unshift(val);\n        return;\n    }\n    for (var i = this.length; i > index; i--) {\n        this[i] = this[i - 1];\n    }\n    this[index] = val;\n};\n\n_$rapyd$_list_insert.__argnames__ = [\"index\", \"val\"];\n\nfunction _$rapyd$_list_copy() {\n    return _$rapyd$_list_constructor(this);\n};\n\nfunction _$rapyd$_list_clear() {\n    this.length = 0;\n};\n\nfunction _$rapyd$_list_as_array() {\n    return Array.prototype.slice.call(this);\n};\n\nfunction _$rapyd$_list_count(value) {\n    return this.reduce((function() {\n        var _$rapyd$_anonfunc = function (n, val) {\n            return n + (val === value);\n        };\n\n        _$rapyd$_anonfunc.__argnames__ = [\"n\", \"val\"];\n        return _$rapyd$_anonfunc;\n    })(), 0);\n};\n\n_$rapyd$_list_count.__argnames__ = [\"value\"];\n\nfunction _$rapyd$_list_sort_key(value) {\n    var t;\n    t = typeof value;\n    if (t === \"string\" || t === \"number\") {\n        return value;\n    }\n    return value.toString();\n};\n\n_$rapyd$_list_sort_key.__argnames__ = [\"value\"];\n\nfunction _$rapyd$_list_sort_cmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n};\n\n_$rapyd$_list_sort_cmp.__argnames__ = [\"a\", \"b\"];\n\nfunction _$rapyd$_list_sort(key, reverse) {\n    var mult, keymap, k;\n    key = key || _$rapyd$_list_sort_key;\n    mult = (reverse) ? -1 : 1;\n    keymap = dict();\n    for (var i=0; i < this.length; i++) {\n        k = this[i];\n        keymap.set(k, key(k));\n    }\n    this.sort((function() {\n        var _$rapyd$_anonfunc = function (a, b) {\n            return mult * _$rapyd$_list_sort_cmp(keymap.get(a), keymap.get(b));\n        };\n\n        _$rapyd$_anonfunc.__argnames__ = [\"a\", \"b\"];\n        return _$rapyd$_anonfunc;\n    })());\n};\n\n_$rapyd$_list_sort.__argnames__ = [\"key\", \"reverse\"];\n\nfunction _$rapyd$_list_concat() {\n    var ans;\n    ans = Array.prototype.concat.apply(this, arguments);\n    _$rapyd$_list_decorate(ans);\n    return ans;\n};\n\nfunction _$rapyd$_list_slice() {\n    var ans;\n    ans = Array.prototype.slice.apply(this, arguments);\n    _$rapyd$_list_decorate(ans);\n    return ans;\n};\n\nfunction _$rapyd$_list_iterator(value) {\n    var self;\n    self = this;\n    return {\n        \"_i\": -1,\n        \"_list\": self,\n        \"next\": (function() {\n            var _$rapyd$_anonfunc = function () {\n                this._i += 1;\n                if (this._i >= this._list.length) {\n                    return {\n                        \"done\": true\n                    };\n                }\n                return {\n                    \"done\": false,\n                    \"value\": this._list[this._i]\n                };\n            };\n            return _$rapyd$_anonfunc;\n        })()\n    };\n};\n\n_$rapyd$_list_iterator.__argnames__ = [\"value\"];\n\nfunction _$rapyd$_list_len() {\n    return this.length;\n};\n\nfunction _$rapyd$_list_contains(val) {\n    for (var i = 0; i < this.length; i++) {\n        if ((this[i] === val || typeof this[i] === \"object\" && _$rapyd$_equals(this[i], val))) {\n            return true;\n        }\n    }\n    return false;\n};\n\n_$rapyd$_list_contains.__argnames__ = [\"val\"];\n\nfunction _$rapyd$_list_eq(other) {\n    if (!_$rapyd$_arraylike(other)) {\n        return false;\n    }\n    if ((this.length !== other.length && (typeof this.length !== \"object\" || _$rapyd$_not_equals(this.length, other.length)))) {\n        return false;\n    }\n    for (var i = 0; i < this.length; i++) {\n        if (!((this[i] === other[i] || typeof this[i] === \"object\" && _$rapyd$_equals(this[i], other[i])))) {\n            return false;\n        }\n    }\n    return true;\n};\n\n_$rapyd$_list_eq.__argnames__ = [\"other\"];\n\nfunction _$rapyd$_list_decorate(ans) {\n    ans.append = Array.prototype.push;\n    ans.toString = _$rapyd$_list_to_string;\n    ans.inspect = _$rapyd$_list_to_string;\n    ans.extend = _$rapyd$_list_extend;\n    ans.index = _$rapyd$_list_index;\n    ans.pypop = _$rapyd$_list_pop;\n    ans.remove = _$rapyd$_list_remove;\n    ans.insert = _$rapyd$_list_insert;\n    ans.copy = _$rapyd$_list_copy;\n    ans.clear = _$rapyd$_list_clear;\n    ans.count = _$rapyd$_list_count;\n    ans.concat = _$rapyd$_list_concat;\n    ans.pysort = _$rapyd$_list_sort;\n    ans.slice = _$rapyd$_list_slice;\n    ans.as_array = _$rapyd$_list_as_array;\n    ans.__len__ = _$rapyd$_list_len;\n    ans.__contains__ = _$rapyd$_list_contains;\n    ans.__eq__ = _$rapyd$_list_eq;\n    ans.constructor = _$rapyd$_list_constructor;\n    if (typeof ans[_$rapyd$_iterator_symbol] !== \"function\") {\n        ans[_$rapyd$_iterator_symbol] = _$rapyd$_list_iterator;\n    }\n    return ans;\n};\n\n_$rapyd$_list_decorate.__argnames__ = [\"ans\"];\n\nfunction _$rapyd$_list_constructor(iterable) {\n    var ans, iterator, result;\n    if (iterable === undefined) {\n        ans = [];\n    } else if (_$rapyd$_arraylike(iterable)) {\n        ans = new Array(iterable.length);\n        for (var i = 0; i < iterable.length; i++) {\n            ans[i] = iterable[i];\n        }\n    } else if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n        iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n        ans = _$rapyd$_list_decorate([]);\n        result = iterator.next();\n        while (!result.done) {\n            ans.push(result.value);\n            result = iterator.next();\n        }\n    } else if (typeof iterable === \"number\") {\n        ans = new Array(iterable);\n    } else {\n        ans = Object.keys(iterable);\n    }\n    return _$rapyd$_list_decorate(ans);\n};\n\n_$rapyd$_list_constructor.__argnames__ = [\"iterable\"];\n\n_$rapyd$_list_constructor.__name__ = \"list\";\nvar list = _$rapyd$_list_constructor, list_wrap = _$rapyd$_list_decorate;\nfunction sorted() {\n    var iterable = ( 0 === arguments.length-1 && arguments[arguments.length-1] !== null && typeof arguments[arguments.length-1] === \"object\" && arguments[arguments.length-1] [_$rapyd$_kwargs_symbol] === true) ? undefined : arguments[0];\n    var key = (arguments[1] === undefined || ( 1 === arguments.length-1 && arguments[arguments.length-1] !== null && typeof arguments[arguments.length-1] === \"object\" && arguments[arguments.length-1] [_$rapyd$_kwargs_symbol] === true)) ? sorted.__defaults__.key : arguments[1];\n    var reverse = (arguments[2] === undefined || ( 2 === arguments.length-1 && arguments[arguments.length-1] !== null && typeof arguments[arguments.length-1] === \"object\" && arguments[arguments.length-1] [_$rapyd$_kwargs_symbol] === true)) ? sorted.__defaults__.reverse : arguments[2];\n    var _$rapyd$_kwargs_obj = arguments[arguments.length-1];\n    if (_$rapyd$_kwargs_obj === null || typeof _$rapyd$_kwargs_obj !== \"object\" || _$rapyd$_kwargs_obj [_$rapyd$_kwargs_symbol] !== true) _$rapyd$_kwargs_obj = {};\n    if (Object.prototype.hasOwnProperty.call(_$rapyd$_kwargs_obj, \"key\")){\n        key = _$rapyd$_kwargs_obj.key;\n    }\n    if (Object.prototype.hasOwnProperty.call(_$rapyd$_kwargs_obj, \"reverse\")){\n        reverse = _$rapyd$_kwargs_obj.reverse;\n    }\n    var ans;\n    ans = _$rapyd$_list_constructor(iterable);\n    ans.pysort(key, reverse);\n    return ans;\n};\n\nsorted.__defaults__ = {\n    key:null, \n    reverse:false\n};\n\nsorted.__handles_kwarg_interpolation__ = true;\n\nsorted.__argnames__ = [\"iterable\", \"key\", \"reverse\"];\n\nvar _$rapyd$_global_object_id = 0, _$rapyd$_set_implementation;\nfunction _$rapyd$_set_keyfor(x) {\n    var t, ans;\n    t = typeof x;\n    if (t === \"string\" || t === \"number\" || t === \"boolean\") {\n        return \"_\" + t[0] + x;\n    }\n    if (x === null) {\n        return \"__!@#$0\";\n    }\n    ans = x._$rapyd$_hash_key_prop;\n    if (ans === undefined) {\n        ans = \"_!@#$\" + (++_$rapyd$_global_object_id);\n        Object.defineProperty(x, \"_$rapyd$_hash_key_prop\", {\n            \"value\": ans\n        });\n    }\n    return ans;\n};\n\n_$rapyd$_set_keyfor.__argnames__ = [\"x\"];\n\nfunction _$rapyd$_set_polyfill() {\n    this._store = {};\n    this.size = 0;\n};\n\n_$rapyd$_set_polyfill.prototype.add = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        var key;\n        key = _$rapyd$_set_keyfor(x);\n        if (!Object.hasOwnProperty.call(this._store, key)) {\n            this.size += 1;\n            this._store[key] = x;\n        }\n        return this;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set_polyfill.prototype.clear = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        this._store = {};\n        this.size = 0;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set_polyfill.prototype.delete = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        var key;\n        key = _$rapyd$_set_keyfor(x);\n        if (Object.hasOwnProperty.call(this._store, key)) {\n            this.size -= 1;\n            delete this._store[key];\n            return true;\n        }\n        return false;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set_polyfill.prototype.has = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        return Object.hasOwnProperty.call(this._store, _$rapyd$_set_keyfor(x));\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set_polyfill.prototype.values = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        var keys, s;\n        keys = Object.keys(this._store);\n        s = this._store;\n        return (function(){\n            var _$rapyd$_d = {};\n            _$rapyd$_d[\"_keys\"] = keys;\n            _$rapyd$_d[\"_i\"] = -1;\n            _$rapyd$_d[\"_s\"] = s;\n            _$rapyd$_d[_$rapyd$_iterator_symbol] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    return this;\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            _$rapyd$_d[\"next\"] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    this._i += 1;\n                    if (this._i >= this._keys.length) {\n                        return {\n                            \"done\": true\n                        };\n                    }\n                    return {\n                        \"done\": false,\n                        \"value\": s[this._keys[this._i]]\n                    };\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            return _$rapyd$_d;\n        })();\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\nif (typeof Set !== \"function\" || typeof Set.prototype.delete !== \"function\") {\n    _$rapyd$_set_implementation = _$rapyd$_set_polyfill;\n} else {\n    _$rapyd$_set_implementation = Set;\n}\nfunction _$rapyd$_set(iterable) {\n    var ans, s, iterator, result, keys;\n    if (this instanceof _$rapyd$_set) {\n        this.jsset = new _$rapyd$_set_implementation;\n        ans = this;\n        if (iterable === undefined) {\n            return ans;\n        }\n        s = ans.jsset;\n        if (_$rapyd$_arraylike(iterable)) {\n            for (var i = 0; i < iterable.length; i++) {\n                s.add(iterable[i]);\n            }\n        } else if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n            iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n            result = iterator.next();\n            while (!result.done) {\n                s.add(result.value);\n                result = iterator.next();\n            }\n        } else {\n            keys = Object.keys(iterable);\n            for (var j=0; j < keys.length; j++) {\n                s.add(keys[j]);\n            }\n        }\n        return ans;\n    } else {\n        return new _$rapyd$_set(iterable);\n    }\n};\n\n_$rapyd$_set.__argnames__ = [\"iterable\"];\n\n_$rapyd$_set.prototype.__name__ = \"set\";\nObject.defineProperties(_$rapyd$_set.prototype, {\n    \"length\": {\n        \"get\": (function() {\n            var _$rapyd$_anonfunc = function () {\n                return this.jsset.size;\n            };\n            return _$rapyd$_anonfunc;\n        })()\n    },\n    \"size\": {\n        \"get\": (function() {\n            var _$rapyd$_anonfunc = function () {\n                return this.jsset.size;\n            };\n            return _$rapyd$_anonfunc;\n        })()\n    }\n});\n_$rapyd$_set.prototype.__len__ = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return this.jsset.size;\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_chain_assign_temp = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        return this.jsset.has(x);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.has = _$rapyd$_chain_assign_temp;\n_$rapyd$_set.prototype.__contains__ = _$rapyd$_chain_assign_temp;\n;\n_$rapyd$_set.prototype.add = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        this.jsset.add(x);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.clear = (function() {\n    var _$rapyd$_anonfunc = function () {\n        this.jsset.clear();\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.copy = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return _$rapyd$_set(this);\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.discard = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        this.jsset.delete(x);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype[_$rapyd$_iterator_symbol] = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return this.jsset.values();\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.difference = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var ans, s, iterator, r, x, has;\n        ans = new _$rapyd$_set;\n        s = ans.jsset;\n        iterator = this.jsset.values();\n        r = iterator.next();\n        while (!r.done) {\n            x = r.value;\n            has = false;\n            for (var i = 0; i < arguments.length; i++) {\n                if (arguments[i].has(x)) {\n                    has = true;\n                    break;\n                }\n            }\n            if (!has) {\n                s.add(x);\n            }\n            r = iterator.next();\n        }\n        return ans;\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.difference_update = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var s, remove, iterator, r, x;\n        s = this.jsset;\n        remove = [];\n        iterator = s.values();\n        r = iterator.next();\n        while (!r.done) {\n            x = r.value;\n            for (var i = 0; i < arguments.length; i++) {\n                if (arguments[i].has(x)) {\n                    remove.push(x);\n                    break;\n                }\n            }\n            r = iterator.next();\n        }\n        for (var j = 0; j < remove.length; j++) {\n            s.delete(remove[j]);\n        }\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.intersection = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var ans, s, iterator, r, x, has;\n        ans = new _$rapyd$_set;\n        s = ans.jsset;\n        iterator = this.jsset.values();\n        r = iterator.next();\n        while (!r.done) {\n            x = r.value;\n            has = true;\n            for (var i = 0; i < arguments.length; i++) {\n                if (!arguments[i].has(x)) {\n                    has = false;\n                    break;\n                }\n            }\n            if (has) {\n                s.add(x);\n            }\n            r = iterator.next();\n        }\n        return ans;\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.intersection_update = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var s, remove, iterator, r, x;\n        s = this.jsset;\n        remove = [];\n        iterator = s.values();\n        r = iterator.next();\n        while (!r.done) {\n            x = r.value;\n            for (var i = 0; i < arguments.length; i++) {\n                if (!arguments[i].has(x)) {\n                    remove.push(x);\n                    break;\n                }\n            }\n            r = iterator.next();\n        }\n        for (var j = 0; j < remove.length; j++) {\n            s.delete(remove[j]);\n        }\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.isdisjoint = (function() {\n    var _$rapyd$_anonfunc = function (other) {\n        var iterator, r, x;\n        iterator = this.jsset.values();\n        r = iterator.next();\n        while (!r.done) {\n            x = r.value;\n            if (other.has(x)) {\n                return false;\n            }\n            r = iterator.next();\n        }\n        return true;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"other\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.issubset = (function() {\n    var _$rapyd$_anonfunc = function (other) {\n        var iterator, r, x;\n        iterator = this.jsset.values();\n        r = iterator.next();\n        while (!r.done) {\n            x = r.value;\n            if (!other.has(x)) {\n                return false;\n            }\n            r = iterator.next();\n        }\n        return true;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"other\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.issuperset = (function() {\n    var _$rapyd$_anonfunc = function (other) {\n        var s, iterator, r, x;\n        s = this.jsset;\n        iterator = other.jsset.values();\n        r = iterator.next();\n        while (!r.done) {\n            x = r.value;\n            if (!s.has(x)) {\n                return false;\n            }\n            r = iterator.next();\n        }\n        return true;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"other\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.pop = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var iterator, r;\n        iterator = this.jsset.values();\n        r = iterator.next();\n        if (r.done) {\n            throw new KeyError(\"pop from an empty set\");\n        }\n        this.jsset.delete(r.value);\n        return r.value;\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.remove = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        if (!this.jsset.delete(x)) {\n            throw new KeyError(x.toString());\n        }\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.symmetric_difference = (function() {\n    var _$rapyd$_anonfunc = function (other) {\n        return this.union(other).difference(this.intersection(other));\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"other\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.symmetric_difference_update = (function() {\n    var _$rapyd$_anonfunc = function (other) {\n        var common;\n        common = this.intersection(other);\n        this.update(other);\n        this.difference_update(common);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"other\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.union = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var ans;\n        ans = _$rapyd$_set(this);\n        ans.update.apply(ans, arguments);\n        return ans;\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.update = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var s, iterator, r;\n        s = this.jsset;\n        for (var i=0; i < arguments.length; i++) {\n            iterator = arguments[i][_$rapyd$_iterator_symbol]();\n            r = iterator.next();\n            while (!r.done) {\n                s.add(r.value);\n                r = iterator.next();\n            }\n        }\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_chain_assign_temp = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return \"{\" + list(this).join(\", \") + \"}\";\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_set.prototype.toString = _$rapyd$_chain_assign_temp;\n_$rapyd$_set.prototype.inspect = _$rapyd$_chain_assign_temp;\n;\n_$rapyd$_set.prototype.__eq__ = (function() {\n    var _$rapyd$_anonfunc = function (other) {\n        var iterator, r;\n        if (!(other instanceof this.constructor)) {\n            return false;\n        }\n        if (other.size !== this.size) {\n            return false;\n        }\n        if (other.size === 0) {\n            return true;\n        }\n        iterator = other[_$rapyd$_iterator_symbol]();\n        r = iterator.next();\n        while (!r.done) {\n            if (!this.has(r.value)) {\n                return false;\n            }\n            r = iterator.next();\n        }\n        return true;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"other\"];\n    return _$rapyd$_anonfunc;\n})();\nfunction _$rapyd$_set_wrap(x) {\n    var ans;\n    ans = new _$rapyd$_set;\n    ans.jsset = x;\n    return ans;\n};\n\n_$rapyd$_set_wrap.__argnames__ = [\"x\"];\n\nvar set = _$rapyd$_set, set_wrap = _$rapyd$_set_wrap;\nvar _$rapyd$_dict_implementation;\nfunction _$rapyd$_dict_polyfill() {\n    this._store = {};\n    this.size = 0;\n};\n\n_$rapyd$_dict_polyfill.prototype.set = (function() {\n    var _$rapyd$_anonfunc = function (x, value) {\n        var key;\n        key = _$rapyd$_set_keyfor(x);\n        if (!Object.hasOwnProperty.call(this._store, key)) {\n            this.size += 1;\n        }\n        this._store[key] = [x, value];\n        return this;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\", \"value\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict_polyfill.prototype.clear = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        this._store = {};\n        this.size = 0;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict_polyfill.prototype.delete = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        var key;\n        key = _$rapyd$_set_keyfor(x);\n        if (Object.hasOwnProperty.call(this._store, key)) {\n            this.size -= 1;\n            delete this._store[key];\n            return true;\n        }\n        return false;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict_polyfill.prototype.has = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        return Object.hasOwnProperty.call(this._store, _$rapyd$_set_keyfor(x));\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict_polyfill.prototype.get = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        try {\n            return this._store[_$rapyd$_set_keyfor(x)][1];\n        } catch (_$rapyd$_Exception) {\n            if (_$rapyd$_Exception instanceof TypeError) {\n                return undefined;\n            } else {\n                throw _$rapyd$_Exception;\n            }\n        }\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict_polyfill.prototype.values = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        var keys, s;\n        keys = Object.keys(this._store);\n        s = this._store;\n        return (function(){\n            var _$rapyd$_d = {};\n            _$rapyd$_d[\"_keys\"] = keys;\n            _$rapyd$_d[\"_i\"] = -1;\n            _$rapyd$_d[\"_s\"] = s;\n            _$rapyd$_d[_$rapyd$_iterator_symbol] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    return this;\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            _$rapyd$_d[\"next\"] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    this._i += 1;\n                    if (this._i >= this._keys.length) {\n                        return {\n                            \"done\": true\n                        };\n                    }\n                    return {\n                        \"done\": false,\n                        \"value\": s[this._keys[this._i]][1]\n                    };\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            return _$rapyd$_d;\n        })();\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict_polyfill.prototype.keys = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        var keys, s;\n        keys = Object.keys(this._store);\n        s = this._store;\n        return (function(){\n            var _$rapyd$_d = {};\n            _$rapyd$_d[\"_keys\"] = keys;\n            _$rapyd$_d[\"_i\"] = -1;\n            _$rapyd$_d[\"_s\"] = s;\n            _$rapyd$_d[_$rapyd$_iterator_symbol] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    return this;\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            _$rapyd$_d[\"next\"] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    this._i += 1;\n                    if (this._i >= this._keys.length) {\n                        return {\n                            \"done\": true\n                        };\n                    }\n                    return {\n                        \"done\": false,\n                        \"value\": s[this._keys[this._i]][0]\n                    };\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            return _$rapyd$_d;\n        })();\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict_polyfill.prototype.entries = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        var keys, s;\n        keys = Object.keys(this._store);\n        s = this._store;\n        return (function(){\n            var _$rapyd$_d = {};\n            _$rapyd$_d[\"_keys\"] = keys;\n            _$rapyd$_d[\"_i\"] = -1;\n            _$rapyd$_d[\"_s\"] = s;\n            _$rapyd$_d[_$rapyd$_iterator_symbol] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    return this;\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            _$rapyd$_d[\"next\"] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    this._i += 1;\n                    if (this._i >= this._keys.length) {\n                        return {\n                            \"done\": true\n                        };\n                    }\n                    return {\n                        \"done\": false,\n                        \"value\": s[this._keys[this._i]]\n                    };\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            return _$rapyd$_d;\n        })();\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\nif (typeof Map !== \"function\" || typeof Map.prototype.delete !== \"function\") {\n    _$rapyd$_dict_implementation = _$rapyd$_dict_polyfill;\n} else {\n    _$rapyd$_dict_implementation = Map;\n}\nfunction _$rapyd$_dict(iterable) {\n    if (this instanceof _$rapyd$_dict) {\n        this.jsmap = new _$rapyd$_dict_implementation;\n        if (iterable !== undefined) {\n            this.update(iterable);\n        }\n        return this;\n    } else {\n        return new _$rapyd$_dict(iterable);\n    }\n};\n\n_$rapyd$_dict.__argnames__ = [\"iterable\"];\n\n_$rapyd$_dict.prototype.__name__ = \"dict\";\nObject.defineProperties(_$rapyd$_dict.prototype, {\n    \"length\": {\n        \"get\": (function() {\n            var _$rapyd$_anonfunc = function () {\n                return this.jsmap.size;\n            };\n            return _$rapyd$_anonfunc;\n        })()\n    },\n    \"size\": {\n        \"get\": (function() {\n            var _$rapyd$_anonfunc = function () {\n                return this.jsmap.size;\n            };\n            return _$rapyd$_anonfunc;\n        })()\n    }\n});\n_$rapyd$_dict.prototype.__len__ = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return this.jsmap.size;\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_chain_assign_temp = (function() {\n    var _$rapyd$_anonfunc = function (x) {\n        return this.jsmap.has(x);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"x\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.has = _$rapyd$_chain_assign_temp;\n_$rapyd$_dict.prototype.__contains__ = _$rapyd$_chain_assign_temp;\n;\n_$rapyd$_chain_assign_temp = (function() {\n    var _$rapyd$_anonfunc = function (key, value) {\n        this.jsmap.set(key, value);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"key\", \"value\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.set = _$rapyd$_chain_assign_temp;\n_$rapyd$_dict.prototype.__setitem__ = _$rapyd$_chain_assign_temp;\n;\n_$rapyd$_dict.prototype.clear = (function() {\n    var _$rapyd$_anonfunc = function () {\n        this.jsmap.clear();\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.copy = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return _$rapyd$_dict(this);\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.keys = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return this.jsmap.keys();\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.values = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return this.jsmap.values();\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_chain_assign_temp = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return this.jsmap.entries();\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.items = _$rapyd$_chain_assign_temp;\n_$rapyd$_dict.prototype.entries = _$rapyd$_chain_assign_temp;\n;\n_$rapyd$_dict.prototype[_$rapyd$_iterator_symbol] = (function() {\n    var _$rapyd$_anonfunc = function () {\n        return this.jsmap.keys();\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.__getitem__ = (function() {\n    var _$rapyd$_anonfunc = function (key) {\n        var ans;\n        ans = this.jsmap.get(key);\n        if (ans === undefined && !this.jsmap.has(key)) {\n            throw new KeyError(key + \"\");\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"key\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.get = (function() {\n    var _$rapyd$_anonfunc = function (key, defval) {\n        var ans;\n        ans = this.jsmap.get(key);\n        if (ans === undefined && !this.jsmap.has(key)) {\n            return (defval === undefined) ? null : defval;\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"key\", \"defval\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.set_default = (function() {\n    var _$rapyd$_anonfunc = function (key, defval) {\n        var j;\n        j = this.jsmap;\n        if (!j.has(key)) {\n            j.set(key, defval);\n            return defval;\n        }\n        return j.get(key);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"key\", \"defval\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_chain_assign_temp = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var iterable = ( 0 === arguments.length-1 && arguments[arguments.length-1] !== null && typeof arguments[arguments.length-1] === \"object\" && arguments[arguments.length-1] [_$rapyd$_kwargs_symbol] === true) ? undefined : arguments[0];\n        var value = (arguments[1] === undefined || ( 1 === arguments.length-1 && arguments[arguments.length-1] !== null && typeof arguments[arguments.length-1] === \"object\" && arguments[arguments.length-1] [_$rapyd$_kwargs_symbol] === true)) ? _$rapyd$_anonfunc.__defaults__.value : arguments[1];\n        var _$rapyd$_kwargs_obj = arguments[arguments.length-1];\n        if (_$rapyd$_kwargs_obj === null || typeof _$rapyd$_kwargs_obj !== \"object\" || _$rapyd$_kwargs_obj [_$rapyd$_kwargs_symbol] !== true) _$rapyd$_kwargs_obj = {};\n        if (Object.prototype.hasOwnProperty.call(_$rapyd$_kwargs_obj, \"value\")){\n            value = _$rapyd$_kwargs_obj.value;\n        }\n        var ans, iterator, r;\n        ans = _$rapyd$_dict();\n        iterator = iter(iterable);\n        r = iterator.next();\n        while (!r.done) {\n            ans.set(r.value, value);\n            r = iterator.next();\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__defaults__ = {\n        value:null\n    };\n\n    _$rapyd$_anonfunc.__handles_kwarg_interpolation__ = true;\n\n    _$rapyd$_anonfunc.__argnames__ = [\"iterable\", \"value\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.fromkeys = _$rapyd$_chain_assign_temp;\n_$rapyd$_dict.prototype.fromkeys = _$rapyd$_chain_assign_temp;\n;\n_$rapyd$_dict.prototype.pop = (function() {\n    var _$rapyd$_anonfunc = function (key, defval) {\n        var ans;\n        ans = this.jsmap.get(key);\n        if (ans === undefined && !this.jsmap.has(key)) {\n            if (defval === undefined) {\n                throw new KeyError(key);\n            }\n            return defval;\n        }\n        this.jsmap.delete(key);\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"key\", \"defval\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.popitem = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var r;\n        r = this.jsmap.entries().next();\n        if (r.done) {\n            throw new KeyError(\"dict is empty\");\n        }\n        this.jsmap.delete(r.value[0]);\n        return r.value;\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.update = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var m, iterable, iterator, result, keys;\n        if (arguments.length === 0) {\n            return;\n        }\n        m = this.jsmap;\n        iterable = arguments[0];\n        if (Array.isArray(iterable)) {\n            for (var i = 0; i < iterable.length; i++) {\n                m.set(iterable[i][0], iterable[i][1]);\n            }\n        } else if (iterable instanceof _$rapyd$_dict) {\n            iterator = iterable.items();\n            result = iterator.next();\n            while (!result.done) {\n                m.set(result.value[0], result.value[1]);\n                result = iterator.next();\n            }\n        } else if (typeof Map === \"function\" && iterable instanceof Map) {\n            iterator = iterable.entries();\n            result = iterator.next();\n            while (!result.done) {\n                m.set(result.value[0], result.value[1]);\n                result = iterator.next();\n            }\n        } else if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n            iterator = iterable[_$rapyd$_iterator_symbol]();\n            result = iterator.next();\n            while (!result.done) {\n                m.set(result.value[0], result.value[1]);\n                result = iterator.next();\n            }\n        } else {\n            keys = Object.keys(iterable);\n            for (var j=0; j < keys.length; j++) {\n                if (keys[j] !== _$rapyd$_iterator_symbol) {\n                    m.set(keys[j], iterable[keys[j]]);\n                }\n            }\n        }\n        if (arguments.length > 1) {\n            _$rapyd$_dict.prototype.update.call(this, arguments[1]);\n        }\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_chain_assign_temp = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var entries, iterator, r;\n        entries = [];\n        iterator = this.jsmap.entries();\n        r = iterator.next();\n        while (!r.done) {\n            entries.push(r.value[0] + \": \" + r.value[1]);\n            r = iterator.next();\n        }\n        return \"{\" + entries.join(\", \") + \"}\";\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.toString = _$rapyd$_chain_assign_temp;\n_$rapyd$_dict.prototype.inspect = _$rapyd$_chain_assign_temp;\n;\n_$rapyd$_dict.prototype.__eq__ = (function() {\n    var _$rapyd$_anonfunc = function (other) {\n        var iterator, r, x;\n        if (!(other instanceof this.constructor)) {\n            return false;\n        }\n        if (other.size !== this.size) {\n            return false;\n        }\n        if (other.size === 0) {\n            return true;\n        }\n        iterator = other.items();\n        r = iterator.next();\n        while (!r.done) {\n            x = this.jsmap.get(r.value[0]);\n            if (x === undefined && !this.jsmap.has(r.value[0]) || x !== r.value[1]) {\n                return false;\n            }\n            r = iterator.next();\n        }\n        return true;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"other\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_dict.prototype.as_object = (function() {\n    var _$rapyd$_anonfunc = function (other) {\n        var ans, iterator, r;\n        ans = {};\n        iterator = this.jsmap.entries();\n        r = iterator.next();\n        while (!r.done) {\n            ans[r.value[0]] = r.value[1];\n            r = iterator.next();\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"other\"];\n    return _$rapyd$_anonfunc;\n})();\nfunction _$rapyd$_dict_wrap(x) {\n    var ans;\n    ans = new _$rapyd$_dict;\n    ans.jsmap = x;\n    return ans;\n};\n\n_$rapyd$_dict_wrap.__argnames__ = [\"x\"];\n\nvar dict = _$rapyd$_dict, dict_wrap = _$rapyd$_dict_wrap;",
  "errors": "var Exception = Error;\nfunction AttributeError() {\n    if (this._$rapyd$_object_id === undefined) Object.defineProperty(this, \"_$rapyd$_object_id\", {\"value\":++_$rapyd$_object_counter});\n    AttributeError.prototype.__init__.apply(this, arguments);\n}\n_$rapyd$_extends(AttributeError, Error);\nAttributeError.prototype.__init__ = function __init__(msg) {\n    var self = this;\n    self.message = msg;\n    self.stack = (new Error).stack;\n};\n\nAttributeError.prototype.__init__.__argnames__ = [\"msg\"];\nAttributeError.__argnames__ = AttributeError.prototype.__init__.__argnames__;\nAttributeError.__handles_kwarg_interpolation__ = AttributeError.prototype.__init__.__handles_kwarg_interpolation__;\nAttributeError.prototype.__repr__ = function __repr__ () {\n    return \"<\" + __name__ + \".\" + \"AttributeError\" + \" #\" + this._$rapyd$_object_id + \">\";\n};\nAttributeError.prototype.__str__ = function __str__ () {\n    return this.__repr__();\n};\nAttributeError.prototype.name = \"AttributeError\";\n\nfunction IndexError() {\n    if (this._$rapyd$_object_id === undefined) Object.defineProperty(this, \"_$rapyd$_object_id\", {\"value\":++_$rapyd$_object_counter});\n    IndexError.prototype.__init__.apply(this, arguments);\n}\n_$rapyd$_extends(IndexError, Error);\nIndexError.prototype.__init__ = function __init__(msg) {\n    var self = this;\n    self.message = msg;\n    self.stack = (new Error).stack;\n};\n\nIndexError.prototype.__init__.__argnames__ = [\"msg\"];\nIndexError.__argnames__ = IndexError.prototype.__init__.__argnames__;\nIndexError.__handles_kwarg_interpolation__ = IndexError.prototype.__init__.__handles_kwarg_interpolation__;\nIndexError.prototype.__repr__ = function __repr__ () {\n    return \"<\" + __name__ + \".\" + \"IndexError\" + \" #\" + this._$rapyd$_object_id + \">\";\n};\nIndexError.prototype.__str__ = function __str__ () {\n    return this.__repr__();\n};\nIndexError.prototype.name = \"IndexError\";\n\nfunction KeyError() {\n    if (this._$rapyd$_object_id === undefined) Object.defineProperty(this, \"_$rapyd$_object_id\", {\"value\":++_$rapyd$_object_counter});\n    KeyError.prototype.__init__.apply(this, arguments);\n}\n_$rapyd$_extends(KeyError, Error);\nKeyError.prototype.__init__ = function __init__(msg) {\n    var self = this;\n    self.message = msg;\n    self.stack = (new Error).stack;\n};\n\nKeyError.prototype.__init__.__argnames__ = [\"msg\"];\nKeyError.__argnames__ = KeyError.prototype.__init__.__argnames__;\nKeyError.__handles_kwarg_interpolation__ = KeyError.prototype.__init__.__handles_kwarg_interpolation__;\nKeyError.prototype.__repr__ = function __repr__ () {\n    return \"<\" + __name__ + \".\" + \"KeyError\" + \" #\" + this._$rapyd$_object_id + \">\";\n};\nKeyError.prototype.__str__ = function __str__ () {\n    return this.__repr__();\n};\nKeyError.prototype.name = \"KeyError\";\n\nfunction ValueError() {\n    if (this._$rapyd$_object_id === undefined) Object.defineProperty(this, \"_$rapyd$_object_id\", {\"value\":++_$rapyd$_object_counter});\n    ValueError.prototype.__init__.apply(this, arguments);\n}\n_$rapyd$_extends(ValueError, Error);\nValueError.prototype.__init__ = function __init__(msg) {\n    var self = this;\n    self.message = msg;\n    self.stack = (new Error).stack;\n};\n\nValueError.prototype.__init__.__argnames__ = [\"msg\"];\nValueError.__argnames__ = ValueError.prototype.__init__.__argnames__;\nValueError.__handles_kwarg_interpolation__ = ValueError.prototype.__init__.__handles_kwarg_interpolation__;\nValueError.prototype.__repr__ = function __repr__ () {\n    return \"<\" + __name__ + \".\" + \"ValueError\" + \" #\" + this._$rapyd$_object_id + \">\";\n};\nValueError.prototype.__str__ = function __str__ () {\n    return this.__repr__();\n};\nValueError.prototype.name = \"ValueError\";\n\nfunction UnicodeDecodeError() {\n    if (this._$rapyd$_object_id === undefined) Object.defineProperty(this, \"_$rapyd$_object_id\", {\"value\":++_$rapyd$_object_counter});\n    UnicodeDecodeError.prototype.__init__.apply(this, arguments);\n}\n_$rapyd$_extends(UnicodeDecodeError, ValueError);\nUnicodeDecodeError.prototype.__init__ = function __init__ () {\n    ValueError.prototype.__init__ && ValueError.prototype.__init__.apply(this, arguments);\n};\nUnicodeDecodeError.prototype.__repr__ = function __repr__ () {\n    return \"<\" + __name__ + \".\" + \"UnicodeDecodeError\" + \" #\" + this._$rapyd$_object_id + \">\";\n};\nUnicodeDecodeError.prototype.__str__ = function __str__ () {\n    return this.__repr__();\n};\nUnicodeDecodeError.prototype.name = \"UnicodeDecodeError\";\n",
  "itertools": "function sum(iterable, start) {\n    var ans, iterator, r;\n    if (Array.isArray(iterable)) {\n        return iterable.reduce((function() {\n            var _$rapyd$_anonfunc = function (prev, cur) {\n                return prev + cur;\n            };\n\n            _$rapyd$_anonfunc.__argnames__ = [\"prev\", \"cur\"];\n            return _$rapyd$_anonfunc;\n        })(), start || 0);\n    }\n    ans = start || 0;\n    iterator = iter(iterable);\n    r = iterator.next();\n    while (!r.done) {\n        ans += r.value;\n        r = iterator.next();\n    }\n    return ans;\n};\n\nsum.__argnames__ = [\"iterable\", \"start\"];\n\nfunction map() {\n    var func, iterators, args;\n    func = arguments[0];\n    iterators = new Array(arguments.length - 1);\n    args = new Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n        iterators[i - 1] = iter(arguments[i]);\n    }\n    return (function(){\n        var _$rapyd$_d = {};\n        _$rapyd$_d[\"_func\"] = func;\n        _$rapyd$_d[\"_iterators\"] = iterators;\n        _$rapyd$_d[\"_args\"] = args;\n        _$rapyd$_d[\"next\"] = (function() {\n            var _$rapyd$_anonfunc = function () {\n                var r;\n                for (var i = 0; i < this._iterators.length; i++) {\n                    r = this._iterators[i].next();\n                    if (r.done) {\n                        return {\n                            \"done\": true\n                        };\n                    }\n                    this._args[i] = r.value;\n                }\n                return {\n                    \"done\": false,\n                    \"value\": this._func.apply(undefined, this._args)\n                };\n            };\n            return _$rapyd$_anonfunc;\n        })();\n        _$rapyd$_d[_$rapyd$_iterator_symbol] = (function() {\n            var _$rapyd$_anonfunc = function () {\n                return this;\n            };\n            return _$rapyd$_anonfunc;\n        })();\n        return _$rapyd$_d;\n    })();\n};\n\nfunction filter(func_or_none, iterable) {\n    return (function(){\n        var _$rapyd$_d = {};\n        _$rapyd$_d[\"_iterator\"] = iter(iterable);\n        _$rapyd$_d[\"_func\"] = (func_or_none === null) ? bool : func_or_none;\n        _$rapyd$_d[\"next\"] = (function() {\n            var _$rapyd$_anonfunc = function () {\n                var r;\n                r = this._iterator.next();\n                while (!r.done) {\n                    if (this._func(r.value)) {\n                        return r;\n                    }\n                    r = this._iterator.next();\n                }\n                return {\n                    \"done\": true\n                };\n            };\n            return _$rapyd$_anonfunc;\n        })();\n        _$rapyd$_d[_$rapyd$_iterator_symbol] = (function() {\n            var _$rapyd$_anonfunc = function () {\n                return this;\n            };\n            return _$rapyd$_anonfunc;\n        })();\n        return _$rapyd$_d;\n    })();\n};\n\nfilter.__argnames__ = [\"func_or_none\", \"iterable\"];\n\nfunction zip() {\n    var iterators;\n    iterators = new Array(arguments.length);\n    for (var i = 0; i < arguments.length; i++) {\n        iterators[i] = iter(arguments[i]);\n    }\n    return (function(){\n        var _$rapyd$_d = {};\n        _$rapyd$_d[\"_iterators\"] = iterators;\n        _$rapyd$_d[\"next\"] = (function() {\n            var _$rapyd$_anonfunc = function () {\n                var args, r;\n                args = new Array(this._iterators.length);\n                for (var i = 0; i < this._iterators.length; i++) {\n                    r = this._iterators[i].next();\n                    if (r.done) {\n                        return {\n                            \"done\": true\n                        };\n                    }\n                    args[i] = r.value;\n                }\n                return {\n                    \"done\": false,\n                    \"value\": args\n                };\n            };\n            return _$rapyd$_anonfunc;\n        })();\n        _$rapyd$_d[_$rapyd$_iterator_symbol] = (function() {\n            var _$rapyd$_anonfunc = function () {\n                return this;\n            };\n            return _$rapyd$_anonfunc;\n        })();\n        return _$rapyd$_d;\n    })();\n};\n",
  "str": "function _$rapyd$_repr_js_builtin(x, as_array) {\n    var ans, b, keys, key;\n    ans = [];\n    b = \"{}\";\n    if (as_array) {\n        b = \"[]\";\n        for (var i = 0; i < x.length; i++) {\n            ans.push(_$rapyd$_repr(x[i]));\n        }\n    } else {\n        keys = Object.keys(x);\n        for (var k = 0; k < keys.length; k++) {\n            key = keys[k];\n            ans.push(JSON.stringify(key) + \":\" + _$rapyd$_repr(x[key]));\n        }\n    }\n    return b[0] + ans.join(\", \") + b[1];\n};\n\n_$rapyd$_repr_js_builtin.__argnames__ = [\"x\", \"as_array\"];\n\nfunction _$rapyd$_repr(x) {\n    var ans, name;\n    if (x === null) {\n        return \"None\";\n    }\n    if (x === undefined) {\n        return \"undefined\";\n    }\n    ans = x;\n    if (typeof x.__repr__ === \"function\") {\n        ans = x.__repr__();\n    } else if (x === true || x === false) {\n        ans = (x) ? \"True\" : \"False\";\n    } else if (Array.isArray(x)) {\n        ans = _$rapyd$_repr_js_builtin(x, true);\n    } else if (typeof x === \"function\") {\n        ans = x.toString();\n    } else {\n        name = Object.prototype.toString.call(x).slice(8, -1);\n        if (_$rapyd$_not_equals(\"Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array\".indexOf(name), -1)) {\n            return name + \"([\" + x.map((function() {\n                var _$rapyd$_anonfunc = function (i) {\n                    return str.format(\"0x{:02x}\", i);\n                };\n\n                _$rapyd$_anonfunc.__argnames__ = [\"i\"];\n                return _$rapyd$_anonfunc;\n            })()).join(\", \") + \"])\";\n        }\n        ans = (typeof x.toString === \"function\") ? x.toString() : x;\n        if (ans === \"[object Object]\") {\n            return _$rapyd$_repr_js_builtin(x);\n        }\n        try {\n            ans = JSON.stringify(x);\n        } catch (_$rapyd$_Exception) {\n        }\n    }\n    return ans + \"\";\n};\n\n_$rapyd$_repr.__argnames__ = [\"x\"];\n\nfunction _$rapyd$_str(x) {\n    var ans, name;\n    if (x === null) {\n        return \"None\";\n    }\n    if (x === undefined) {\n        return \"undefined\";\n    }\n    ans = x;\n    if (typeof x.__str__ === \"function\") {\n        ans = x.__str__();\n    } else if (typeof x.__repr__ === \"function\") {\n        ans = x.__repr__();\n    } else if (x === true || x === false) {\n        ans = (x) ? \"True\" : \"False\";\n    } else if (Array.isArray(x)) {\n        ans = _$rapyd$_repr_js_builtin(x, true);\n    } else if (typeof x.toString === \"function\") {\n        name = Object.prototype.toString.call(x).slice(8, -1);\n        if (_$rapyd$_not_equals(\"Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array\".indexOf(name), -1)) {\n            return name + \"([\" + x.map((function() {\n                var _$rapyd$_anonfunc = function (i) {\n                    return str.format(\"0x{:02x}\", i);\n                };\n\n                _$rapyd$_anonfunc.__argnames__ = [\"i\"];\n                return _$rapyd$_anonfunc;\n            })()).join(\", \") + \"])\";\n        }\n        ans = x.toString();\n        if (ans === \"[object Object]\") {\n            ans = _$rapyd$_repr_js_builtin(x);\n        }\n    }\n    return ans + \"\";\n};\n\n_$rapyd$_str.__argnames__ = [\"x\"];\n\n_$rapyd$_str.format = (function() {\n    var _$rapyd$_anonfunc = function () {\n        var template, args, kwargs, explicit, implicit, _$rapyd$_chain_assign_temp, idx, ans, pos, in_brace, markup, ch;\n        template = arguments[0];\n        if (template === undefined) {\n            throw new TypeError(\"Template is required\");\n        }\n        args = Array.prototype.slice.call(arguments, 1);\n        kwargs = {};\n        if (args.length && args[args.length-1][_$rapyd$_kwargs_symbol] !== undefined) {\n            kwargs = args[args.length-1];\n            args = args.slice(0, -1);\n        }\n        _$rapyd$_chain_assign_temp = false;\n        explicit = _$rapyd$_chain_assign_temp;\n        implicit = _$rapyd$_chain_assign_temp;\n;\n        idx = 0;\n        if (_$rapyd$_str.format._template_resolve_pat === undefined) {\n            _$rapyd$_str.format._template_resolve_pat = /[.\\[]/;\n        }\n        function resolve(arg, object) {\n            var _$rapyd$_unpack, first, key, rest, ans;\n            if (!arg) {\n                return object;\n            }\n            _$rapyd$_unpack = [arg[0], arg.slice(1)];\n            first = _$rapyd$_unpack[0];\n            arg = _$rapyd$_unpack[1];\n            key = arg.split(_$rapyd$_str.format._template_resolve_pat, 1)[0];\n            rest = arg.slice(key.length);\n            ans = (first === \"[\") ? object[key.slice(0, -1)] : getattr(object, key);\n            if (ans === undefined) {\n                throw new KeyError((first === \"[\") ? key.slice(0, -1) : key);\n            }\n            return resolve(rest, ans);\n        };\n\n        resolve.__argnames__ = [\"arg\", \"object\"];\n\n        function resolve_format_spec(format_spec) {\n            if (_$rapyd$_str.format._template_resolve_fs_pat === undefined) {\n                _$rapyd$_str.format._template_resolve_fs_pat = /[{]([a-zA-Z0-9_]+)[}]/g;\n            }\n            return format_spec.replace(_$rapyd$_str.format._template_resolve_fs_pat, (function() {\n                var _$rapyd$_anonfunc = function (match, key) {\n                    if (!Object.prototype.hasOwnProperty.call(kwargs, key)) {\n                        return \"\";\n                    }\n                    return \"\" + kwargs[key];\n                };\n\n                _$rapyd$_anonfunc.__argnames__ = [\"match\", \"key\"];\n                return _$rapyd$_anonfunc;\n            })());\n        };\n\n        resolve_format_spec.__argnames__ = [\"format_spec\"];\n\n        function apply_formatting(value, format_spec) {\n            var _$rapyd$_unpack, fill, align, sign, fhash, zeropad, width, comma, precision, ftype, is_numeric, is_int, lftype, code, exp, nval, is_positive, left, right;\n            if (format_spec.indexOf(\"{\") !== -1) {\n                format_spec = resolve_format_spec(format_spec);\n            }\n            if (_$rapyd$_str.format._template_format_pat === undefined) {\n                _$rapyd$_str.format._template_format_pat = /([^{}](?=[<>=^]))?([<>=^])?([-+\\x20])?(\\#)?(0)?(\\d+)?(,)?(?:\\.(\\d+))?([bcdeEfFgGnosxX%])?/;\n            }\n            try {\n                _$rapyd$_unpack = format_spec.match(_$rapyd$_str.format._template_format_pat).slice(1);\n                fill = _$rapyd$_unpack[0];\n                align = _$rapyd$_unpack[1];\n                sign = _$rapyd$_unpack[2];\n                fhash = _$rapyd$_unpack[3];\n                zeropad = _$rapyd$_unpack[4];\n                width = _$rapyd$_unpack[5];\n                comma = _$rapyd$_unpack[6];\n                precision = _$rapyd$_unpack[7];\n                ftype = _$rapyd$_unpack[8];\n            } catch (_$rapyd$_Exception) {\n                if (_$rapyd$_Exception instanceof TypeError) {\n                    return value;\n                } else {\n                    throw _$rapyd$_Exception;\n                }\n            }\n            if (zeropad) {\n                fill = fill || \"0\";\n                align = align || \"=\";\n            } else {\n                fill = fill || \" \";\n                align = align || \">\";\n            }\n            is_numeric = Number(value) === value;\n            is_int = is_numeric && value % 1 === 0;\n            precision = parseInt(precision, 10);\n            lftype = (ftype || \"\").toLowerCase();\n            if (ftype === \"n\") {\n                is_numeric = true;\n                if (is_int) {\n                    if (comma) {\n                        throw new ValueError(\"Cannot specify ',' with 'n'\");\n                    }\n                    value = parseInt(value, 10).toLocaleString();\n                } else {\n                    value = parseFloat(value).toLocaleString();\n                }\n            } else if (['b', 'c', 'd', 'o', 'x'].indexOf(lftype) !== -1) {\n                value = parseInt(value, 10);\n                is_numeric = true;\n                if (!isNaN(value)) {\n                    if (ftype === \"b\") {\n                        value = (value >>> 0).toString(2);\n                        if (fhash) {\n                            value = \"0b\" + value;\n                        }\n                    } else if (ftype === \"c\") {\n                        if (value > 65535) {\n                            code = value - 65536;\n                            value = String.fromCharCode(55296 + (code >> 10), 56320 + (code & 1023));\n                        } else {\n                            value = String.fromCharCode(value);\n                        }\n                    } else if (ftype === \"d\") {\n                        if (comma) {\n                            value = value.toLocaleString(\"en-US\");\n                        } else {\n                            value = value.toString(10);\n                        }\n                    } else if (ftype === \"o\") {\n                        value = value.toString(8);\n                        if (fhash) {\n                            value = \"0o\" + value;\n                        }\n                    } else if (lftype === \"x\") {\n                        value = value.toString(16);\n                        value = (ftype === \"x\") ? value.toLowerCase() : value.toUpperCase();\n                        if (fhash) {\n                            value = \"0x\" + value;\n                        }\n                    }\n                }\n            } else if (['e','f','g','%'].indexOf(lftype) !== -1) {\n                is_numeric = true;\n                value = parseFloat(value);\n                if (lftype === \"e\") {\n                    value = value.toExponential((isNaN(precision)) ? 6 : precision);\n                    value = (ftype === \"E\") ? value.toUpperCase() : value.toLowerCase();\n                } else if (lftype === \"f\") {\n                    value = value.toFixed((isNaN(precision)) ? 6 : precision);\n                    value = (ftype === \"F\") ? value.toUpperCase() : value.toLowerCase();\n                } else if (ftype === \"%\") {\n                    value *= 100;\n                    value = value.toFixed((isNaN(precision)) ? 6 : precision) + \"%\";\n                } else if (lftype === \"g\") {\n                    if (isNaN(precision)) {\n                        precision = 6;\n                    }\n                    precision = max(1, precision);\n                    exp = parseInt(value.toExponential(precision - 1).toLowerCase().split(\"e\")[1], 10);\n                    if (-4 <= exp && exp < precision) {\n                        value = value.toFixed(precision - 1 - exp);\n                    } else {\n                        value = value.toExponential(precision - 1);\n                    }\n                    value = value.replace(/0+$/g, \"\");\n                    if (value[value.length-1] === \".\") {\n                        value = value.slice(0, -1);\n                    }\n                    if (ftype === \"G\") {\n                        value = value.toUpperCase();\n                    }\n                }\n            } else {\n                value += \"\";\n                if (!isNaN(precision)) {\n                    value = value.slice(0, precision);\n                }\n            }\n            value += \"\";\n            if (is_numeric && sign) {\n                nval = Number(value);\n                is_positive = !isNaN(nval) && nval >= 0;\n                if (is_positive && (sign === \" \" || sign === \"+\")) {\n                    value = sign + value;\n                }\n            }\n            function repeat(char, num) {\n                return (new Array(num+1)).join(char);\n            };\n\n            repeat.__argnames__ = [\"char\", \"num\"];\n\n            if (is_numeric && width && width[0] === \"0\") {\n                width = width.slice(1);\n                _$rapyd$_unpack = [\"0\", \"=\"];\n                fill = _$rapyd$_unpack[0];\n                align = _$rapyd$_unpack[1];\n            }\n            width = parseInt(width || \"-1\", 10);\n            if (isNaN(width)) {\n                throw new ValueError(\"Invalid width specification: \" + width);\n            }\n            if (fill && value.length < width) {\n                if (align === \"<\") {\n                    value = value + repeat(fill, width - value.length);\n                } else if (align === \">\") {\n                    value = repeat(fill, width - value.length) + value;\n                } else if (align === \"^\") {\n                    left = Math.floor((width - value.length) / 2);\n                    right = width - left - value.length;\n                    value = repeat(fill, left) + value + repeat(fill, right);\n                } else if (align === \"=\") {\n                    if (_$rapyd$_in(value[0], \"+- \")) {\n                        value = value[0] + repeat(fill, width - value.length) + value.slice(1);\n                    } else {\n                        value = repeat(fill, width - value.length) + value;\n                    }\n                } else {\n                    throw new ValueError(\"Unrecognized alignment: \" + align);\n                }\n            }\n            return value;\n        };\n\n        apply_formatting.__argnames__ = [\"value\", \"format_spec\"];\n\n        function parse_markup(markup) {\n            var key, transformer, format_spec, _$rapyd$_chain_assign_temp, pos, state, ch;\n            _$rapyd$_chain_assign_temp = \"\";\n            key = _$rapyd$_chain_assign_temp;\n            transformer = _$rapyd$_chain_assign_temp;\n            format_spec = _$rapyd$_chain_assign_temp;\n;\n            pos = 0;\n            state = 0;\n            while (pos < markup.length) {\n                ch = markup[pos];\n                if (state === 0) {\n                    if (ch === \"!\") {\n                        state = 1;\n                    } else if (ch === \":\") {\n                        state = 2;\n                    } else {\n                        key += ch;\n                    }\n                } else if (state === 1) {\n                    if (ch === \":\") {\n                        state = 2;\n                    } else {\n                        transformer += ch;\n                    }\n                } else {\n                    format_spec += ch;\n                }\n                pos += 1;\n            }\n            return [key, transformer, format_spec];\n        };\n\n        parse_markup.__argnames__ = [\"markup\"];\n\n        function render_markup(markup) {\n            var _$rapyd$_unpack, key, transformer, format_spec, lkey, nvalue, object, ans;\n            _$rapyd$_unpack = parse_markup(markup);\n            key = _$rapyd$_unpack[0];\n            transformer = _$rapyd$_unpack[1];\n            format_spec = _$rapyd$_unpack[2];\n            if (transformer && ['a', 'r', 's'].indexOf(transformer) === -1) {\n                throw new ValueError(\"Unknown conversion specifier: \" + transformer);\n            }\n            lkey = key.length && key.split(/[.\\[]/, 1)[0];\n            if (lkey) {\n                explicit = true;\n                if (implicit) {\n                    throw new ValueError(\"cannot switch from automatic field numbering to manual field specification\");\n                }\n                nvalue = parseInt(lkey);\n                object = (isNaN(nvalue)) ? kwargs[lkey] : args[nvalue];\n                if (object === undefined) {\n                    if (isNaN(nvalue)) {\n                        throw new KeyError(lkey);\n                    }\n                    throw new IndexError(lkey);\n                }\n                object = resolve(key.slice(lkey.length), object);\n            } else {\n                implicit = true;\n                if (explicit) {\n                    throw new ValueError(\"cannot switch from manual field specification to automatic field numbering\");\n                }\n                if (idx >= args.length) {\n                    throw new IndexError(\"Not enough arguments to match template: \" + template);\n                }\n                object = args[idx];\n                idx += 1;\n            }\n            if (typeof object === \"function\") {\n                object = object();\n            }\n            ans = \"\" + object;\n            if (format_spec) {\n                ans = apply_formatting(ans, format_spec);\n            }\n            return ans;\n        };\n\n        render_markup.__argnames__ = [\"markup\"];\n\n        ans = \"\";\n        pos = 0;\n        in_brace = 0;\n        markup = \"\";\n        while (pos < template.length) {\n            ch = template[pos];\n            if (in_brace) {\n                if (ch === \"{\") {\n                    in_brace += 1;\n                    markup += \"{\";\n                } else if (ch === \"}\") {\n                    in_brace -= 1;\n                    if (in_brace > 0) {\n                        markup += \"}\";\n                    } else {\n                        ans += render_markup(markup);\n                    }\n                } else {\n                    markup += ch;\n                }\n            } else {\n                if (ch === \"{\") {\n                    if (template[pos + 1] === \"{\") {\n                        pos += 1;\n                        ans += \"{\";\n                    } else {\n                        in_brace = 1;\n                        markup = \"\";\n                    }\n                } else {\n                    ans += ch;\n                }\n            }\n            pos += 1;\n        }\n        if (in_brace) {\n            throw new ValueError(\"expected '}' before end of string\");\n        }\n        return ans;\n    };\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.capitalize = (function() {\n    var _$rapyd$_anonfunc = function (string) {\n        if (string) {\n            string = string[0].toUpperCase() + string.slice(1).toLowerCase();\n        }\n        return string;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.center = (function() {\n    var _$rapyd$_anonfunc = function (string, width, fill) {\n        var left, right;\n        left = Math.floor((width - string.length) / 2);\n        right = width - left - string.length;\n        fill = fill || \" \";\n        return new Array(left+1).join(fill) + string + new Array(right+1).join(fill);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"width\", \"fill\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.count = (function() {\n    var _$rapyd$_anonfunc = function (string, needle, start, end) {\n        var _$rapyd$_unpack, pos, step, ans;\n        start = start || 0;\n        end = end || string.length;\n        if (start < 0 || end < 0) {\n            string = string.slice(start, end);\n            _$rapyd$_unpack = [0, string.length];\n            start = _$rapyd$_unpack[0];\n            end = _$rapyd$_unpack[1];\n        }\n        pos = start;\n        step = needle.length;\n        ans = 0;\n        while (pos !== -1) {\n            pos = string.indexOf(needle, pos);\n            if (pos !== -1) {\n                ans += 1;\n                pos += step;\n            }\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"needle\", \"start\", \"end\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.endswith = (function() {\n    var _$rapyd$_anonfunc = function (string, suffixes, start, end) {\n        var q;\n        start = start || 0;\n        if (typeof suffixes === \"string\") {\n            suffixes = [suffixes];\n        }\n        if (end !== undefined) {\n            string = string.slice(0, end);\n        }\n        for (var i = 0; i < suffixes.length; i++) {\n            q = suffixes[i];\n            if (string.indexOf(q, Math.max(start, string.length - q.length)) !== -1) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"suffixes\", \"start\", \"end\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.startswith = (function() {\n    var _$rapyd$_anonfunc = function (string, prefixes, start, end) {\n        var prefix;\n        start = start || 0;\n        if (typeof prefixes === \"string\") {\n            prefixes = [prefixes];\n        }\n        for (var i = 0; i < prefixes.length; i++) {\n            prefix = prefixes[i];\n            end = (end === undefined) ? string.length : end;\n            if (end - start >= prefix.length && prefix === string.slice(start, start + prefix.length)) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"prefixes\", \"start\", \"end\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.find = (function() {\n    var _$rapyd$_anonfunc = function (string, needle, start, end) {\n        var ans;\n        while (start < 0) {\n            start += string.length;\n        }\n        ans = string.indexOf(needle, start);\n        if (end !== undefined && ans !== -1) {\n            while (end < 0) {\n                end += string.length;\n            }\n            if (ans >= end - needle.length) {\n                return -1;\n            }\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"needle\", \"start\", \"end\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.rfind = (function() {\n    var _$rapyd$_anonfunc = function (string, needle, start, end) {\n        var ans;\n        while (end < 0) {\n            end += string.length;\n        }\n        ans = string.lastIndexOf(needle, end - 1);\n        if (start !== undefined && ans !== -1) {\n            while (start < 0) {\n                start += string.length;\n            }\n            if (ans < start) {\n                return -1;\n            }\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"needle\", \"start\", \"end\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.index = (function() {\n    var _$rapyd$_anonfunc = function (string, needle, start, end) {\n        var ans;\n        ans = _$rapyd$_str.find.apply(null, arguments);\n        if (ans === -1) {\n            throw new ValueError(\"substring not found\");\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"needle\", \"start\", \"end\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.rindex = (function() {\n    var _$rapyd$_anonfunc = function (string, needle, start, end) {\n        var ans;\n        ans = _$rapyd$_str.rfind.apply(null, arguments);\n        if (ans === -1) {\n            throw new ValueError(\"substring not found\");\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"needle\", \"start\", \"end\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.islower = (function() {\n    var _$rapyd$_anonfunc = function (string) {\n        return string.length > 0 && string.toUpperCase() !== string;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.isupper = (function() {\n    var _$rapyd$_anonfunc = function (string) {\n        return string.length > 0 && string.toLowerCase() !== string;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.isspace = (function() {\n    var _$rapyd$_anonfunc = function (string) {\n        return string.length > 0 && /^\\s+$/.test(string);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.join = (function() {\n    var _$rapyd$_anonfunc = function (string, iterable) {\n        var ans, r;\n        if (Array.isArray(iterable)) {\n            return iterable.join(string);\n        }\n        ans = \"\";\n        r = iterable.next();\n        while (!r.done) {\n            if (ans) {\n                ans += string;\n            }\n            ans += r.value;\n            r = iterable.next();\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"iterable\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.ljust = (function() {\n    var _$rapyd$_anonfunc = function (string, width, fill) {\n        if (width > string.length) {\n            fill = fill || \" \";\n            string += new Array(width - string.length + 1).join(fill);\n        }\n        return string;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"width\", \"fill\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.rjust = (function() {\n    var _$rapyd$_anonfunc = function (string, width, fill) {\n        if (width > string.length) {\n            fill = fill || \" \";\n            string = new Array(width - string.length + 1).join(fill) + string;\n        }\n        return string;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"width\", \"fill\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.lower = (function() {\n    var _$rapyd$_anonfunc = function (string) {\n        return string.toLowerCase();\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.upper = (function() {\n    var _$rapyd$_anonfunc = function (string) {\n        return string.toUpperCase();\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.lstrip = (function() {\n    var _$rapyd$_anonfunc = function (string, chars) {\n        var pos;\n        pos = 0;\n        chars = chars || _$rapyd$_str.whitespace;\n        while (chars.indexOf(string[pos]) !== -1) {\n            pos += 1;\n        }\n        if (pos) {\n            string = string.slice(pos);\n        }\n        return string;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"chars\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.rstrip = (function() {\n    var _$rapyd$_anonfunc = function (string, chars) {\n        var pos;\n        pos = string.length - 1;\n        chars = chars || _$rapyd$_str.whitespace;\n        while (chars.indexOf(string[pos]) !== -1) {\n            pos -= 1;\n        }\n        if (pos < string.length - 1) {\n            string = string.slice(0, pos + 1);\n        }\n        return string;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"chars\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.strip = (function() {\n    var _$rapyd$_anonfunc = function (string, chars) {\n        return _$rapyd$_str.lstrip(_$rapyd$_str.rstrip(string, chars), chars);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"chars\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.partition = (function() {\n    var _$rapyd$_anonfunc = function (string, sep) {\n        var idx;\n        idx = string.indexOf(sep);\n        if (idx === -1) {\n            return [string, \"\", \"\"];\n        }\n        return [string.slice(0, idx), sep, string.slice(idx + sep.length)];\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"sep\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.rpartition = (function() {\n    var _$rapyd$_anonfunc = function (string, sep) {\n        var idx;\n        idx = string.lastIndexOf(sep);\n        if (idx === -1) {\n            return [\"\", \"\", string];\n        }\n        return [string.slice(0, idx), sep, string.slice(idx + sep.length)];\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"sep\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.replace = (function() {\n    var _$rapyd$_anonfunc = function (string, old, repl, count) {\n        var pos, idx;\n        if (count === 1) {\n            return string.replace(old, repl);\n        }\n        if (count < 1) {\n            return string;\n        }\n        count = count || Number.MAX_VALUE;\n        pos = 0;\n        while (count > 0) {\n            count -= 1;\n            idx = string.indexOf(old, pos);\n            if (idx === -1) {\n                break;\n            }\n            pos = idx + repl.length;\n            string = string.slice(0, idx) + repl + string.slice(idx + old.length);\n        }\n        return string;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"old\", \"repl\", \"count\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.split = (function() {\n    var _$rapyd$_anonfunc = function (string, sep, maxsplit) {\n        var ans, extra, parts;\n        if (maxsplit === 0) {\n            return _$rapyd$_list_decorate([ string ]);\n        }\n        if (sep === undefined || sep === null) {\n            if (maxsplit > 0) {\n                ans = string.split(/(\\s+)/);\n                extra = \"\";\n                parts = [];\n                for (var i = 0; i < ans.length; i++) {\n                    if (parts.length >= maxsplit + 1) {\n                        extra += ans[i];\n                    } else if (i % 2 === 0) {\n                        parts.push(ans[i]);\n                    }\n                }\n                parts[parts.length-1] += extra;\n                ans = parts;\n            } else {\n                ans = string.split(/\\s+/);\n            }\n        } else {\n            if (sep === \"\") {\n                throw new ValueError(\"empty separator\");\n            }\n            ans = string.split(sep);\n            if (maxsplit > 0 && ans.length > maxsplit) {\n                extra = ans.slice(maxsplit).join(sep);\n                ans = ans.slice(0, maxsplit);\n                ans.push(extra);\n            }\n        }\n        return _$rapyd$_list_decorate(ans);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"sep\", \"maxsplit\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.rsplit = (function() {\n    var _$rapyd$_anonfunc = function (string, sep, maxsplit) {\n        var ans, is_space, pos, current, spc, ch, end, _$rapyd$_chain_assign_temp, idx;\n        if (!maxsplit) {\n            return _$rapyd$_str.split.call(null, string, sep, maxsplit);\n        }\n        if (sep === undefined || sep === null) {\n            if (maxsplit > 0) {\n                ans = [];\n                is_space = /\\s/;\n                pos = string.length - 1;\n                current = \"\";\n                while (pos > -1 && maxsplit > 0) {\n                    spc = false;\n                    ch = string[pos];\n                    while (pos > -1 && is_space.test(ch)) {\n                        spc = true;\n                        ch = string[--pos];\n                    }\n                    if (spc) {\n                        if (current) {\n                            ans.push(current);\n                            maxsplit -= 1;\n                        }\n                        current = ch;\n                    } else {\n                        current += ch;\n                    }\n                    pos -= 1;\n                }\n                ans.push(string.slice(0, pos + 1) + current);\n                ans.reverse();\n            } else {\n                ans = string.split(/\\s+/);\n            }\n        } else {\n            if (sep === \"\") {\n                throw new ValueError(\"empty separator\");\n            }\n            ans = [];\n            _$rapyd$_chain_assign_temp = string.length;\n            pos = _$rapyd$_chain_assign_temp;\n            end = _$rapyd$_chain_assign_temp;\n;\n            while (pos > -1 && maxsplit > 0) {\n                maxsplit -= 1;\n                idx = string.lastIndexOf(sep, pos);\n                if (idx === -1) {\n                    break;\n                }\n                ans.push(string.slice(idx + sep.length, end));\n                pos = idx - 1;\n                end = idx;\n            }\n            ans.push(string.slice(0, end));\n            ans.reverse();\n        }\n        return _$rapyd$_list_decorate(ans);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"sep\", \"maxsplit\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.splitlines = (function() {\n    var _$rapyd$_anonfunc = function (string, keepends) {\n        var parts, ans;\n        if (keepends) {\n            parts = string.split(/((?:\\r?\\n)|\\r)/);\n            ans = [];\n            for (var i = 0; i < parts.length; i++) {\n                if (i % 2 === 0) {\n                    ans.push(parts[i]);\n                } else {\n                    ans[ans.length-1] += parts[i];\n                }\n            }\n        } else {\n            ans = string.split(/(?:\\r?\\n)|\\r/);\n        }\n        return _$rapyd$_list_decorate(ans);\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"keepends\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.swapcase = (function() {\n    var _$rapyd$_anonfunc = function (string) {\n        var ans, a, b;\n        ans = new Array(string.length);\n        for (var i = 0; i < ans.length; i++) {\n            a = string[i];\n            b = a.toLowerCase();\n            if (a === b) {\n                b = a.toUpperCase();\n            }\n            ans[i] = b;\n        }\n        return ans.join(\"\");\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.zfill = (function() {\n    var _$rapyd$_anonfunc = function (string, width) {\n        if (width > string.length) {\n            string = new Array(width - string.length + 1).join(\"0\") + string;\n        }\n        return string;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"width\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.uchrs = (function() {\n    var _$rapyd$_anonfunc = function (string, with_positions) {\n        return (function(){\n            var _$rapyd$_d = {};\n            _$rapyd$_d[\"_string\"] = string;\n            _$rapyd$_d[\"_pos\"] = 0;\n            _$rapyd$_d[_$rapyd$_iterator_symbol] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    return this;\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            _$rapyd$_d[\"next\"] = (function() {\n                var _$rapyd$_anonfunc = function () {\n                    var length, pos, value, ans, extra;\n                    length = this._string.length;\n                    if (this._pos >= length) {\n                        return {\n                            \"done\": true\n                        };\n                    }\n                    pos = this._pos;\n                    value = this._string.charCodeAt(this._pos++);\n                    ans = \"\\ufffd\";\n                    if (55296 <= value && value <= 56319) {\n                        if (this._pos < length) {\n                            extra = this._string.charCodeAt(this._pos++);\n                            if ((extra & 56320) === 56320) {\n                                ans = String.fromCharCode(value, extra);\n                            }\n                        }\n                    } else if ((value & 56320) !== 56320) {\n                        ans = String.fromCharCode(value);\n                    }\n                    if (with_positions) {\n                        return {\n                            \"done\": false,\n                            \"value\": _$rapyd$_list_decorate([ pos, ans ])\n                        };\n                    } else {\n                        return {\n                            \"done\": false,\n                            \"value\": ans\n                        };\n                    }\n                };\n                return _$rapyd$_anonfunc;\n            })();\n            return _$rapyd$_d;\n        })();\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"with_positions\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.uslice = (function() {\n    var _$rapyd$_anonfunc = function (string, start, end) {\n        var items, iterator, r;\n        items = [];\n        iterator = _$rapyd$_str.uchrs(string);\n        r = iterator.next();\n        while (!r.done) {\n            items.push(r.value);\n            r = iterator.next();\n        }\n        return items.slice(start || 0, (end === undefined) ? items.length : end).join(\"\");\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\", \"start\", \"end\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.ulen = (function() {\n    var _$rapyd$_anonfunc = function (string) {\n        var iterator, r, ans;\n        iterator = _$rapyd$_str.uchrs(string);\n        r = iterator.next();\n        ans = 0;\n        while (!r.done) {\n            r = iterator.next();\n            ans += 1;\n        }\n        return ans;\n    };\n\n    _$rapyd$_anonfunc.__argnames__ = [\"string\"];\n    return _$rapyd$_anonfunc;\n})();\n_$rapyd$_str.ascii_lowercase = \"abcdefghijklmnopqrstuvwxyz\";\n_$rapyd$_str.ascii_uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n_$rapyd$_str.ascii_letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n_$rapyd$_str.digits = \"0123456789\";\n_$rapyd$_str.punctuation = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\n_$rapyd$_str.printable = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\u000b\\f\";\n_$rapyd$_str.whitespace = \" \\t\\n\\r\\u000b\\f\";\nvar str = _$rapyd$_str, repr = _$rapyd$_repr;"
}